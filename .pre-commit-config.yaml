# Pre-commit configuration for Intelluxe AI Healthcare System
# Comprehensive code quality and security checks with PHI detection

repos:
  # Code formatting and linting
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        exclude: '\.md$'
      - id: end-of-file-fixer
        exclude: '\.md$'
      - id: check-yaml
        args: ['--unsafe']
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: mixed-line-ending
        args: ['--fix=lf']
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: ['--pytest-test-first']

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3
        args: ['--line-length=100']

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ['--profile', 'black', '--line-length=100']

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: ['--max-line-length=100', '--extend-ignore=E203,W503']
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify

  # Python type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.3.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        args: ['--ignore-missing-imports', '--strict-optional']

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-r', '.', '-f', 'json', '-o', 'bandit-report.json']
        exclude: 'tests/|test_'

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: '\.lock$|\.min\.js$|\.map$|package-lock\.json$'

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.2
    hooks:
      - id: shellcheck
        args: ['-x', '--severity=info']

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.32.0
    hooks:
      - id: yamllint
        args: ['-d', 'relaxed']

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: ['--ignore', 'DL3008', '--ignore', 'DL3009']

  # Healthcare-specific PHI detection
  - repo: local
    hooks:
      - id: phi-detection
        name: PHI Detection
        entry: python scripts/check-phi-exposure.sh
        language: system
        files: '\.(py|js|ts|json|yaml|yml|md|txt)$'
        exclude: 'tests/|test_|\.git/|logs/|data/synthetic/'
        pass_filenames: false
        always_run: true

  # Healthcare compliance checks
  - repo: local
    hooks:
      - id: healthcare-compliance
        name: Healthcare Compliance Check
        entry: python -c "
import sys
import re
import os

def check_healthcare_compliance(filename):
    '''Check file for healthcare compliance issues'''
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
        
        issues = []
        
        # Check for medical data handling without proper protection
        if re.search(r'patient.*data|medical.*record|phi', content, re.IGNORECASE):
            if not re.search(r'encrypt|audit|log|security', content, re.IGNORECASE):
                issues.append(f'{filename}: Medical data handling without security measures')
        
        # Check for hardcoded medical information
        medical_patterns = [
            r'\b\d{3}-\d{2}-\d{4}\b',  # SSN pattern
            r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',  # Email
            r'\b\d{3}-\d{3}-\d{4}\b'  # Phone
        ]
        
        for pattern in medical_patterns:
            if re.search(pattern, content):
                issues.append(f'{filename}: Potential PHI pattern detected')
                break
        
        # Check for proper medical disclaimers in AI code
        if re.search(r'medical.*ai|ai.*medical|diagnosis|treatment', content, re.IGNORECASE):
            if not re.search(r'disclaimer|educational.*purpose|consult.*healthcare', content, re.IGNORECASE):
                issues.append(f'{filename}: Medical AI code missing disclaimers')
        
        return issues
    except Exception as e:
        return [f'{filename}: Error checking compliance - {str(e)}']

# Check all Python files
issues = []
for root, dirs, files in os.walk('.'):
    # Skip certain directories
    if any(skip in root for skip in ['.git', 'node_modules', '__pycache__', '.pytest_cache']):
        continue
    
    for file in files:
        if file.endswith(('.py', '.js', '.ts')):
            filepath = os.path.join(root, file)
            issues.extend(check_healthcare_compliance(filepath))

if issues:
    print('Healthcare Compliance Issues Found:')
    for issue in issues:
        print(f'  - {issue}')
    sys.exit(1)
else:
    print('Healthcare compliance check passed')
"
        language: system
        files: '\.(py|js|ts)$'
        exclude: 'tests/|test_|\.git/'
        pass_filenames: false
        always_run: true

  # Medical terminology validation
  - repo: local
    hooks:
      - id: medical-terminology
        name: Medical Terminology Validation
        entry: python -c "
import sys
import re
import os

# Common medical terminology that should be spelled correctly
medical_terms = {
    'hipaa': 'HIPAA',
    'phi': 'PHI',
    'fhir': 'FHIR',
    'hl7': 'HL7',
    'icd': 'ICD',
    'cpt': 'CPT',
    'snomed': 'SNOMED',
    'loinc': 'LOINC'
}

def check_medical_terminology(filename):
    '''Check for proper medical terminology'''
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
        
        issues = []
        
        for incorrect, correct in medical_terms.items():
            # Look for incorrect lowercase versions in comments and strings
            pattern = r'(?i)\b' + re.escape(incorrect) + r'\b'
            if re.search(pattern, content):
                # Check if it's already correctly capitalized
                correct_pattern = r'\b' + re.escape(correct) + r'\b'
                if not re.search(correct_pattern, content):
                    issues.append(f'{filename}: Use {correct} instead of {incorrect}')
        
        return issues
    except Exception as e:
        return []

# Check relevant files
issues = []
for root, dirs, files in os.walk('.'):
    if any(skip in root for skip in ['.git', 'node_modules', '__pycache__']):
        continue
    
    for file in files:
        if file.endswith(('.py', '.md', '.rst', '.txt')):
            filepath = os.path.join(root, file)
            issues.extend(check_medical_terminology(filepath))

if issues:
    print('Medical Terminology Issues Found:')
    for issue in issues:
        print(f'  - {issue}')
    print('Please use proper medical terminology capitalization.')
else:
    print('Medical terminology validation passed')
"
        language: system
        files: '\.(py|md|rst|txt)$'
        exclude: 'tests/|test_|\.git/'
        pass_filenames: false
        always_run: true

  # HIPAA configuration validation
  - repo: local
    hooks:
      - id: hipaa-config-validation
        name: HIPAA Configuration Validation
        entry: python -c "
import sys
import yaml
import json
import os

def validate_hipaa_config():
    '''Validate HIPAA configuration files'''
    issues = []
    
    # Check for HIPAA compliance configuration
    hipaa_config_file = 'config/security/hipaa_compliance.yml'
    if os.path.exists(hipaa_config_file):
        try:
            with open(hipaa_config_file, 'r') as f:
                config = yaml.safe_load(f)
            
            # Check required sections
            required_sections = [
                'administrative_safeguards',
                'physical_safeguards', 
                'technical_safeguards',
                'encryption',
                'audit_monitoring'
            ]
            
            for section in required_sections:
                if section not in config:
                    issues.append(f'Missing required HIPAA section: {section}')
            
            # Check encryption requirements
            if 'encryption' in config:
                encryption = config['encryption']
                if 'data_at_rest' not in encryption or not encryption['data_at_rest'].get('database_encryption'):
                    issues.append('Database encryption not enabled in HIPAA config')
                
                if 'data_in_transit' not in encryption or encryption['data_in_transit'].get('tls_version') != '1.3':
                    issues.append('TLS 1.3 not configured for data in transit')
            
        except Exception as e:
            issues.append(f'Error validating HIPAA config: {str(e)}')
    else:
        issues.append('HIPAA compliance configuration file not found')
    
    return issues

issues = validate_hipaa_config()

if issues:
    print('HIPAA Configuration Issues Found:')
    for issue in issues:
        print(f'  - {issue}')
    sys.exit(1)
else:
    print('HIPAA configuration validation passed')
"
        language: system
        files: 'config/security/.*\.yml$'
        pass_filenames: false
        always_run: true

  # Docker security checks
  - repo: local
    hooks:
      - id: docker-security
        name: Docker Security Check
        entry: python -c "
import sys
import os
import re

def check_dockerfile_security(filename):
    '''Check Dockerfile for security issues'''
    try:
        with open(filename, 'r') as f:
            content = f.read()
        
        issues = []
        
        # Check for root user
        if not re.search(r'USER\s+(?!root)', content):
            issues.append(f'{filename}: Dockerfile should not run as root user')
        
        # Check for COPY/ADD with proper permissions
        if re.search(r'COPY.*--chown', content) or re.search(r'ADD.*--chown', content):
            pass  # Good practice
        elif re.search(r'COPY|ADD', content):
            issues.append(f'{filename}: Consider using --chown with COPY/ADD commands')
        
        # Check for health checks
        if not re.search(r'HEALTHCHECK', content):
            issues.append(f'{filename}: Missing HEALTHCHECK instruction')
        
        # Check for secrets in environment variables
        env_lines = re.findall(r'ENV\s+.*', content)
        for line in env_lines:
            if re.search(r'(password|secret|key|token)=\w+', line, re.IGNORECASE):
                issues.append(f'{filename}: Potential secret in ENV instruction')
        
        return issues
    except Exception as e:
        return []

# Check all Dockerfiles
issues = []
for root, dirs, files in os.walk('.'):
    if '.git' in root:
        continue
    
    for file in files:
        if file.startswith('Dockerfile'):
            filepath = os.path.join(root, file)
            issues.extend(check_dockerfile_security(filepath))

if issues:
    print('Docker Security Issues Found:')
    for issue in issues:
        print(f'  - {issue}')
    sys.exit(1)
else:
    print('Docker security check passed')
"
        language: system
        files: 'Dockerfile.*'
        pass_filenames: false
        always_run: true

# Configuration for specific tools
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [phi-detection, healthcare-compliance, medical-terminology, hipaa-config-validation, docker-security]
  submodules: false
