{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run All Linting",
            "group": "build",
            "type": "shell",
            "command": "make",
            "args": [
                "lint"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": false
            },
            "problemMatcher": [
                "$python",
                "$eslint-stylish"
            ]
        },
        {
            "label": "MyPy (Healthcare API only)",
            "group": "build",
            "type": "shell",
            "command": "mypy",
            "args": [
                "--config-file",
                "mypy.ini",
                "services/user/healthcare-api"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Quick Lint Check",
            "group": "build",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Running quick lint check...' && flake8 --select=E9,F63,F7,F82 --show-source --statistics src/ && echo '‚úÖ Quick lint passed'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": false,
                "reveal": "silent",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "MyPy Type Check",
            "group": "build",
            "type": "shell",
            "command": "mypy",
            "args": [
                "."
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Auto-fix Linting Issues",
            "group": "build",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîß Auto-fixing linting issues...' && black src/ tests/ && isort src/ tests/ && echo '‚úÖ Auto-fix complete'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Test LangChain Agent Fix",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "test_langchain_fix.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Debug MCP Connection",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "-c",
                "import asyncio; from core.mcp.direct_mcp_client import DirectMCPClient; asyncio.run(DirectMCPClient().debug_connection())"
            ],
            "options": {
                "cwd": "${workspaceFolder}/services/user/healthcare-api"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Build Healthcare API",
            "group": "build",
            "type": "shell",
            "command": "make",
            "args": [
                "healthcare-api-build"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Test Ollama Connection",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing Ollama connection...' && curl -s http://172.20.0.10:11434/api/version && echo '‚úÖ Ollama connection successful' || echo '‚ùå Ollama connection failed'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Test LangChain Agent Connection",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "cd services/user/healthcare-api && OLLAMA_URL=http://172.20.0.10:11434 python3 -c \"import sys; sys.path.append('/home/intelluxe/services/user/healthcare-api'); from core.langchain.agents import HealthcareLangChainAgent; from core.mcp.direct_mcp_client import DirectMCPClient; mcp_client = DirectMCPClient(); agent = HealthcareLangChainAgent(mcp_client); print('‚úÖ LangChain agent initialized successfully')\""
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Debug MCP Tool Connection",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "cd services/user/healthcare-api && python3 -c \"import asyncio; import sys; sys.path.append('/home/intelluxe/services/user/healthcare-api'); from core.mcp.direct_mcp_client import DirectMCPClient; async def test(): client = DirectMCPClient(); result = await client.call_tool('search-pubmed', {'query': 'test'}); print(f'MCP result: {result}'); asyncio.run(test())\""
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Validate Healthcare Environment",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Healthcare Environment Validation:' && echo 'OLLAMA_URL:' $OLLAMA_URL && echo 'Testing Ollama...' && curl -s http://172.20.0.10:11434/api/version | head -1 && echo 'Testing healthcare-api import...' && cd services/user/healthcare-api && python3 -c \"from core.langchain.agents import HealthcareLangChainAgent; print('‚úÖ Import successful')\" && echo '‚úÖ Healthcare environment validation complete'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Run Integration Smoke Tests",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "scripts/run_integration_tests.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Monitor Open WebUI Healthcare Integration",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Monitoring Open WebUI Healthcare Integration...' && echo 'Watching logs for healthcare agent activity:' && echo 'healthcare_system.log and agent_medical_search.log' && echo 'Make a medical query in Open WebUI now...' && tail -f logs/healthcare_system.log logs/agent_medical_search.log"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "isBackground": true
        },
        {
            "label": "Test Medical Search Agent Direct",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing Medical Search Agent Direct (bypass Open WebUI)...' && cd services/user/healthcare-api && python3 -c \"import sys; sys.path.append('/home/intelluxe/services/user/healthcare-api'); from agents.medical_search_agent import MedicalLiteratureSearchAssistant; from core.mcp.direct_mcp_client import DirectMCPClient; import ollama; mcp_client = DirectMCPClient(); llm_client = ollama.AsyncClient(host='http://172.20.0.10:11434'); agent = MedicalLiteratureSearchAssistant(mcp_client, llm_client); print('‚úÖ Medical search agent loaded successfully'); print('Agent type:', type(agent)); print('MCP client:', type(mcp_client)); print('LLM client:', type(llm_client))\""
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Check Healthcare API Request Routing",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Checking Healthcare API Request Routing...' && echo 'Analyzing recent healthcare system logs for request patterns:' && echo '--- Medical/Search Keywords ---' && grep -i -E '(medical|search|agent|pubmed|clinical)' logs/healthcare_system.log | tail -10 && echo '--- Request Processing ---' && grep -i -E '(request|routing|intent|classification)' logs/healthcare_system.log | tail -10 && echo '--- Agent Activity ---' && grep -i 'agent' logs/healthcare_system.log | tail -5"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Test Open WebUI Connection",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing Open WebUI Connection...' && echo 'Testing healthcare API endpoint:' && curl -s http://localhost:8000/health && echo '' && echo 'Testing Open WebUI chat endpoint (if available):' && curl -s -X POST http://localhost:8000/v1/chat/completions -H 'Content-Type: application/json' -d '{\"model\":\"healthcare\",\"messages\":[{\"role\":\"user\",\"content\":\"test medical query\"}]}' | head -200 && echo ''"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Debug Healthcare Agent Registration",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Debugging Healthcare Agent Registration...' && cd services/user/healthcare-api && python3 -c \"import sys; sys.path.append('/home/intelluxe/services/user/healthcare-api'); try: from core.agent_coordinator import AgentCoordinator; coordinator = AgentCoordinator(); print('Available agents:', coordinator.list_agents()); except ImportError as e: print('AgentCoordinator not found:', e); print('Checking for agent imports...'); import os; print('Agent files:', [f for f in os.listdir('agents') if f.endswith('.py')]); except Exception as e: print('Error:', e)\""
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Comprehensive Healthcare Stack Test",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Comprehensive Healthcare Stack Test...' && echo '1. Testing Ollama...' && curl -s http://172.20.0.10:11434/api/version && echo '‚úÖ Ollama OK' && echo '2. Testing MCP tools...' && cd services/user/healthcare-api && python3 -c \"import asyncio; from core.mcp.direct_mcp_client import DirectMCPClient; asyncio.run(DirectMCPClient().call_tool('search-pubmed', {'query': 'test'}))\" && echo '‚úÖ MCP OK' && echo '3. Testing Healthcare API...' && curl -s http://localhost:8000/health && echo '‚úÖ API OK' && echo '4. Testing Agent Import...' && python3 -c \"from agents.medical_search_agent import MedicalLiteratureSearchAssistant; from core.mcp.direct_mcp_client import DirectMCPClient; import ollama; print('‚úÖ Agent import OK')\" && echo 'üéâ All healthcare stack components functional'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Quick Lint Check",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Running quick lint check...' && flake8 --select=E9,F63,F7,F82 --show-source --statistics src/ && echo '‚úÖ Quick lint passed'"
            ],
            "group": "build"
        },
        {
            "label": "Diagnose Open WebUI Medical Routing",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "tests/test_open_webui_medical_routing.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Run Open WebUI Medical Routing Tests",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "-m",
                "pytest",
                "tests/test_open_webui_medical_routing.py",
                "-v",
                "-s"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test Open WebUI Endpoints",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "tests/test_open_webui_endpoints.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test Healthcare Agent Routing",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "tests/test_healthcare_agent_routing.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test ToolRegistry Integration",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing ToolRegistry Integration...' && cd services/user/healthcare-api && python3 -c \"from core.tools import tool_registry; import asyncio; async def test(): await tool_registry.initialize(); result = await tool_registry.call_tool('search-pubmed', {'query': 'diabetes'}); print('ToolRegistry result:', type(result)); asyncio.run(test())\" && echo '‚úÖ ToolRegistry integration ready'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test PHI Detection Integration",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing PHI Detection Integration...' && cd services/user/healthcare-api && python3 -c \"from src.healthcare_mcp.phi_detection import sanitize_for_compliance; test_data = {'content': 'Patient John Doe, SSN 123-45-6789'}; result = sanitize_for_compliance(test_data); print('PHI sanitized:', result); print('‚úÖ PHI detection ready')\" && echo 'üõ°Ô∏è HIPAA compliance active'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test BaseHealthcareAgent Integration",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing BaseHealthcareAgent Integration...' && cd services/user/healthcare-api && python3 -c \"from agents import BaseHealthcareAgent; agent = BaseHealthcareAgent(agent_name='test_agent'); print('Healthcare agent created:', type(agent)); print('Agent name:', agent.agent_name); print('‚úÖ BaseHealthcareAgent integration ready')\" && echo 'üè• Healthcare framework active'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Infrastructure Integration Validation",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Infrastructure Integration Validation...' && echo '1. ToolRegistry Health Check...' && cd services/user/healthcare-api && python3 -c \"from core.tools import tool_registry; import asyncio; async def test(): health = await tool_registry.health_check(); print('ToolRegistry health:', health['status']); asyncio.run(test())\" && echo '2. PHI Detection Test...' && python3 -c \"from src.healthcare_mcp.phi_detection import sanitize_for_compliance; print('PHI detection available')\" && echo '3. BaseHealthcareAgent Test...' && python3 -c \"from agents import BaseHealthcareAgent; print('Healthcare framework available')\" && echo 'üéâ All infrastructure components validated'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test Agent-First Architecture",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing Agent-First Architecture...' && echo 'Verifying medical queries go through medical search agent, not direct MCP tools' && cd services/user/healthcare-api && python3 -c \"from core.langchain.healthcare_tools import create_healthcare_tools; from core.mcp.direct_mcp_client import DirectMCPClient; print('‚úÖ Healthcare tools architecture validated')\" && echo 'üéØ Agent-first architecture ready'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        }
    ]
}