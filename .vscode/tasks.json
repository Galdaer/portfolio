{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run All Linting",
            "group": "build",
            "type": "shell",
            "command": "make",
            "args": [
                "lint"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": false
            },
            "problemMatcher": [
                "$python",
                "$eslint-stylish"
            ]
        },
        {
            "label": "Auto-Format All Code",
            "group": "build",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîß Auto-formatting all code...' && echo 'Running Ruff format on Python files...' && ruff format . && echo 'Running Ruff fix on Python files...' && ruff check --fix . && echo 'Running Prettier on JS/TS/JSON files...' && npx prettier --write '**/*.{js,ts,json,md}' --ignore-path .gitignore && echo '‚úÖ All code formatted'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "Fast Format (Ruff Only)",
            "group": "build",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo '‚ö° Fast formatting with Ruff...' && ruff format . && ruff check --fix . && echo '‚úÖ Python formatting complete'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": false,
                "reveal": "silent",
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "MyPy (Healthcare API only)",
            "group": "build",
            "type": "shell",
            "command": "mypy",
            "args": [
                "--config-file",
                "mypy.ini",
                "services/user/healthcare-api"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "MyPy Type Check (Full)",
            "group": "build",
            "type": "shell",
            "command": "mypy",
            "args": [
                "."
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Quick Type Check",
            "group": "build",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Running quick type check (Healthcare API only)...' && mypy --config-file mypy.ini services/user/healthcare-api"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": false,
                "reveal": "silent",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Quick Lint Check",
            "group": "build",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Running quick lint check...' && ruff check services/user/healthcare-api --select=E9,F63,F7,F82 && echo '‚úÖ Quick lint passed'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": false,
                "reveal": "silent",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Fix All Issues (Format + Lint + Type)",
            "group": "build",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîß Comprehensive fix: formatting, linting, and type checking...' && echo '1. Formatting code...' && ruff format . && ruff check --fix . && echo '2. Running type check...' && mypy --config-file mypy.ini services/user/healthcare-api && echo '3. Final lint check...' && ruff check services/user/healthcare-api && echo '‚úÖ All issues fixed'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Auto-Setup Dependencies",
            "group": "build",
            "type": "shell",
            "command": "make",
            "args": [
                "deps"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": []
        },
        {
            "label": "Healthcare Stack Validation",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'ÔøΩ Comprehensive Healthcare Stack Validation...' && echo '1. Testing Ollama...' && curl -sf http://172.20.0.10:11434/api/version >/dev/null && echo '‚úÖ Ollama OK' || echo '‚ùå Ollama FAILED' && echo '2. Testing Healthcare API...' && curl -sf http://localhost:8000/health >/dev/null && echo '‚úÖ API OK' || echo '‚ùå API FAILED' && echo '3. Testing MCP Tools...' && cd services/user/healthcare-api && python3 -c \"import asyncio; from core.mcp.direct_mcp_client import DirectMCPClient; asyncio.run(DirectMCPClient().health_check())\" && echo '‚úÖ MCP OK' && echo '4. Testing Infrastructure Integration...' && python3 -c \"from core.tools import tool_registry; from src.healthcare_mcp.phi_detection import sanitize_for_compliance; from agents import BaseHealthcareAgent; print('‚úÖ All infrastructure components available')\" && echo 'üéâ Healthcare stack validation complete'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test LangChain Agent Fix",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "test_langchain_fix.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Debug MCP Connection",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "-c",
                "import asyncio; from core.mcp.direct_mcp_client import DirectMCPClient; asyncio.run(DirectMCPClient().debug_connection())"
            ],
            "options": {
                "cwd": "${workspaceFolder}/services/user/healthcare-api"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Build Healthcare API",
            "group": "build",
            "type": "shell",
            "command": "make",
            "args": [
                "healthcare-api-build"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Test Ollama Connection",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing Ollama connection...' && curl -s http://172.20.0.10:11434/api/version && echo '‚úÖ Ollama connection successful' || echo '‚ùå Ollama connection failed'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Test LangChain Agent Connection",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "cd services/user/healthcare-api && OLLAMA_URL=http://172.20.0.10:11434 python3 -c \"import sys; sys.path.append('/home/intelluxe/services/user/healthcare-api'); from core.langchain.agents import HealthcareLangChainAgent; from core.mcp.direct_mcp_client import DirectMCPClient; mcp_client = DirectMCPClient(); agent = HealthcareLangChainAgent(mcp_client); print('‚úÖ LangChain agent initialized successfully')\""
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Debug MCP Tool Connection",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "cd services/user/healthcare-api && python3 -c \"import asyncio; import sys; sys.path.append('/home/intelluxe/services/user/healthcare-api'); from core.mcp.direct_mcp_client import DirectMCPClient; async def test(): client = DirectMCPClient(); result = await client.call_tool('search-pubmed', {'query': 'test'}); print(f'MCP result: {result}'); asyncio.run(test())\""
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Validate Healthcare Environment",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Healthcare Environment Validation:' && echo 'OLLAMA_URL:' $OLLAMA_URL && echo 'Testing Ollama...' && curl -s http://172.20.0.10:11434/api/version | head -1 && echo 'Testing healthcare-api import...' && cd services/user/healthcare-api && python3 -c \"from core.langchain.agents import HealthcareLangChainAgent; print('‚úÖ Import successful')\" && echo '‚úÖ Healthcare environment validation complete'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Run Integration Smoke Tests",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "scripts/run_integration_tests.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Monitor Open WebUI Healthcare Integration",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Monitoring Open WebUI Healthcare Integration...' && echo 'Watching logs for healthcare agent activity:' && echo 'healthcare_system.log and agent_medical_search.log' && echo 'Make a medical query in Open WebUI now...' && tail -f logs/healthcare_system.log logs/agent_medical_search.log"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "isBackground": true
        },
        {
            "label": "Test Medical Search Agent Direct",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing Medical Search Agent Direct (bypass Open WebUI)...' && cd services/user/healthcare-api && python3 -c \"import sys; sys.path.append('/home/intelluxe/services/user/healthcare-api'); from agents.medical_search_agent import MedicalLiteratureSearchAssistant; from core.mcp.direct_mcp_client import DirectMCPClient; import ollama; mcp_client = DirectMCPClient(); llm_client = ollama.AsyncClient(host='http://172.20.0.10:11434'); agent = MedicalLiteratureSearchAssistant(mcp_client, llm_client); print('‚úÖ Medical search agent loaded successfully'); print('Agent type:', type(agent)); print('MCP client:', type(mcp_client)); print('LLM client:', type(llm_client))\""
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Check Healthcare API Request Routing",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Checking Healthcare API Request Routing...' && echo 'Analyzing recent healthcare system logs for request patterns:' && echo '--- Medical/Search Keywords ---' && grep -i -E '(medical|search|agent|pubmed|clinical)' logs/healthcare_system.log | tail -10 && echo '--- Request Processing ---' && grep -i -E '(request|routing|intent|classification)' logs/healthcare_system.log | tail -10 && echo '--- Agent Activity ---' && grep -i 'agent' logs/healthcare_system.log | tail -5"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Test Open WebUI Connection",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing Open WebUI Connection...' && echo 'Testing healthcare API endpoint:' && curl -s http://localhost:8000/health && echo '' && echo 'Testing Open WebUI chat endpoint (if available):' && curl -s -X POST http://localhost:8000/v1/chat/completions -H 'Content-Type: application/json' -d '{\"model\":\"healthcare\",\"messages\":[{\"role\":\"user\",\"content\":\"test medical query\"}]}' | head -200 && echo ''"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Debug Healthcare Agent Registration",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Debugging Healthcare Agent Registration...' && cd services/user/healthcare-api && python3 -c \"import sys; sys.path.append('/home/intelluxe/services/user/healthcare-api'); try: from core.agent_coordinator import AgentCoordinator; coordinator = AgentCoordinator(); print('Available agents:', coordinator.list_agents()); except ImportError as e: print('AgentCoordinator not found:', e); print('Checking for agent imports...'); import os; print('Agent files:', [f for f in os.listdir('agents') if f.endswith('.py')]); except Exception as e: print('Error:', e)\""
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Comprehensive Healthcare Stack Test",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Comprehensive Healthcare Stack Test...' && echo '1. Testing Ollama...' && curl -s http://172.20.0.10:11434/api/version && echo '‚úÖ Ollama OK' && echo '2. Testing MCP tools...' && cd services/user/healthcare-api && python3 -c \"import asyncio; from core.mcp.direct_mcp_client import DirectMCPClient; asyncio.run(DirectMCPClient().call_tool('search-pubmed', {'query': 'test'}))\" && echo '‚úÖ MCP OK' && echo '3. Testing Healthcare API...' && curl -s http://localhost:8000/health && echo '‚úÖ API OK' && echo '4. Testing Agent Import...' && python3 -c \"from agents.medical_search_agent import MedicalLiteratureSearchAssistant; from core.mcp.direct_mcp_client import DirectMCPClient; import ollama; print('‚úÖ Agent import OK')\" && echo 'üéâ All healthcare stack components functional'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Quick Lint Check",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Running quick lint check...' && flake8 --select=E9,F63,F7,F82 --show-source --statistics src/ && echo '‚úÖ Quick lint passed'"
            ],
            "group": "build"
        },
        {
            "label": "Diagnose Open WebUI Medical Routing",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "tests/test_open_webui_medical_routing.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Run Open WebUI Medical Routing Tests",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "-m",
                "pytest",
                "tests/test_open_webui_medical_routing.py",
                "-v",
                "-s"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test Open WebUI Endpoints",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "tests/test_open_webui_endpoints.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test Healthcare Agent Routing",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "tests/test_healthcare_agent_routing.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test ToolRegistry Integration",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing ToolRegistry Integration...' && cd services/user/healthcare-api && python3 -c \"from core.tools import tool_registry; import asyncio; async def test(): await tool_registry.initialize(); result = await tool_registry.call_tool('search-pubmed', {'query': 'diabetes'}); print('ToolRegistry result:', type(result)); asyncio.run(test())\" && echo '‚úÖ ToolRegistry integration ready'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test PHI Detection Integration",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing PHI Detection Integration...' && cd services/user/healthcare-api && python3 -c \"from src.healthcare_mcp.phi_detection import sanitize_for_compliance; test_data = {'content': 'Patient John Doe, SSN 123-45-6789'}; result = sanitize_for_compliance(test_data); print('PHI sanitized:', result); print('‚úÖ PHI detection ready')\" && echo 'üõ°Ô∏è HIPAA compliance active'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test BaseHealthcareAgent Integration",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing BaseHealthcareAgent Integration...' && cd services/user/healthcare-api && python3 -c \"from agents import BaseHealthcareAgent; agent = BaseHealthcareAgent(agent_name='test_agent'); print('Healthcare agent created:', type(agent)); print('Agent name:', agent.agent_name); print('‚úÖ BaseHealthcareAgent integration ready')\" && echo 'üè• Healthcare framework active'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Infrastructure Integration Validation",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Infrastructure Integration Validation...' && echo '1. ToolRegistry Health Check...' && cd services/user/healthcare-api && python3 -c \"from core.tools import tool_registry; import asyncio; async def test(): health = await tool_registry.health_check(); print('ToolRegistry health:', health['status']); asyncio.run(test())\" && echo '2. PHI Detection Test...' && python3 -c \"from src.healthcare_mcp.phi_detection import sanitize_for_compliance; print('PHI detection available')\" && echo '3. BaseHealthcareAgent Test...' && python3 -c \"from agents import BaseHealthcareAgent; print('Healthcare framework available')\" && echo 'üéâ All infrastructure components validated'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test Agent-First Architecture",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Testing Agent-First Architecture...' && echo 'Verifying medical queries go through medical search agent, not direct MCP tools' && cd services/user/healthcare-api && python3 -c \"from core.langchain.healthcare_tools import create_healthcare_tools; from core.mcp.direct_mcp_client import DirectMCPClient; print('‚úÖ Healthcare tools architecture validated')\" && echo 'üéØ Agent-first architecture ready'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "focus": true,
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test Infrastructure Integration",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "tests/test_infrastructure_integration.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test E2E Infrastructure Integration",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "tests/test_e2e_infrastructure_integration.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Test Enhanced Medical Query Engine Integration",
            "group": "test",
            "type": "shell",
            "command": "python3",
            "args": [
                "tests/test_enhanced_medical_query_engine_integration.py"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python",
            "dependsOrder": "sequence"
        },
        {
            "label": "Run All Tests",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üß™ Running all healthcare tests...' && python3 -m pytest tests/ -v --tb=short"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Quick Development Cycle",
            "group": "build",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo '‚ö° Quick development cycle: format ‚Üí type check ‚Üí test...' && echo '1. Formatting...' && ruff format services/user/healthcare-api && ruff check --fix services/user/healthcare-api && echo '2. Type checking...' && mypy --config-file mypy.ini services/user/healthcare-api && echo '3. Quick tests...' && python3 tests/test_infrastructure_integration.py && echo '‚úÖ Development cycle complete'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Debug Healthcare Components",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç Debugging Healthcare Components...' && cd services/user/healthcare-api && echo '1. Testing BaseHealthcareAgent...' && python3 -c \"from agents import BaseHealthcareAgent; agent = BaseHealthcareAgent(agent_name='debug_agent'); print('‚úÖ BaseHealthcareAgent:', type(agent))\" && echo '2. Testing LangChain Integration...' && python3 -c \"from core.langchain.agents import HealthcareLangChainAgent; from core.mcp.direct_mcp_client import DirectMCPClient; agent = HealthcareLangChainAgent(DirectMCPClient()); print('‚úÖ LangChain Integration:', type(agent))\" && echo '3. Testing ToolRegistry...' && python3 -c \"from core.tools import tool_registry; import asyncio; asyncio.run(tool_registry.health_check()); print('‚úÖ ToolRegistry functional')\" && echo '4. Testing PHI Detection...' && python3 -c \"from src.healthcare_mcp.phi_detection import sanitize_for_compliance; print('‚úÖ PHI Detection available')\" && echo 'üéâ All components functional'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Auto Fix MyPy Errors",
            "group": "build",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîß Auto-fixing MyPy errors...' && echo 'Step 1: Format code first...' && ruff format services/user/healthcare-api && ruff check --fix services/user/healthcare-api && echo 'Step 2: Run MyPy and show remaining errors...' && mypy --config-file mypy.ini services/user/healthcare-api || echo 'MyPy errors found - manual intervention may be needed' && echo 'Step 3: Re-run after potential fixes...' && mypy --config-file mypy.ini services/user/healthcare-api && echo '‚úÖ MyPy validation complete'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Validate All Healthcare Integration",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üè• Healthcare Integration Validation Pipeline...' && echo '1. Code Quality Check...' && ruff format services/user/healthcare-api && ruff check services/user/healthcare-api && echo '2. Type Safety Check...' && mypy --config-file mypy.ini services/user/healthcare-api && echo '3. Infrastructure Test...' && python3 tests/test_infrastructure_integration.py && echo '4. End-to-End Test...' && python3 tests/test_e2e_infrastructure_integration.py && echo '5. Component Health Check...' && cd services/user/healthcare-api && python3 -c \"from core.tools import tool_registry; from agents import BaseHealthcareAgent; from core.langchain.agents import HealthcareLangChainAgent; from core.mcp.direct_mcp_client import DirectMCPClient; print('‚úÖ All imports successful')\" && echo 'üéâ Healthcare integration fully validated'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared",
                "focus": true,
                "clear": true
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Quick Safety Check",
            "group": "test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üõ°Ô∏è Quick Safety Check...' && echo 'Checking for potential issues before committing...' && echo '1. Format check...' && ruff format --check services/user/healthcare-api && echo '2. Lint check...' && ruff check services/user/healthcare-api && echo '3. Import test...' && cd services/user/healthcare-api && python3 -c \"import sys; sys.path.append('.'); from core.langchain.agents import HealthcareLangChainAgent; print('‚úÖ Key imports working')\" && echo '‚úÖ Safety check passed - safe to proceed'"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": false,
                "reveal": "silent",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Debug PHI Detection False Positives",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üõ°Ô∏è Debugging PHI Detection False Positives...' && cd services/user/healthcare-api && echo '1. Testing medical queries that should NOT be flagged...' && python3 -c \"from src.healthcare_mcp.phi_detection import sanitize_for_compliance; test_queries = ['cardiovascular health', 'diabetes symptoms', 'cancer treatment', 'hypertension management']; print('Testing medical queries:'); [print(f'Query: {q} -> PHI detected: {sanitize_for_compliance({\\\"content\\\": q})}') for q in test_queries]\" && echo '2. Testing personal data that SHOULD be flagged...' && python3 -c \"from src.healthcare_mcp.phi_detection import sanitize_for_compliance; phi_data = ['Patient John Smith', 'DOB: 01/01/1980', 'SSN: 123-45-6789']; print('Testing PHI data:'); [print(f'Data: {d} -> PHI detected: {sanitize_for_compliance({\\\"content\\\": d})}') for d in phi_data]\" && echo '3. Checking recent PHI detection logs...' && tail -20 ../../logs/healthcare_system.log | grep -i 'phi' && echo '‚úÖ PHI detection analysis complete'"
            ],
            "group": "test",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Fix PHI Detection Configuration",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîß Fixing PHI Detection Configuration...' && echo 'Step 1: Backing up current PHI configuration...' && cp src/healthcare_mcp/phi_detection.py src/healthcare_mcp/phi_detection.py.backup.$(date +%Y%m%d_%H%M%S) && echo 'Step 2: Analyzing current Presidio patterns...' && cd services/user/healthcare-api && python3 -c \"from presidio_analyzer import AnalyzerEngine; analyzer = AnalyzerEngine(); entities = analyzer.get_supported_entities(); print('Supported entities:', entities); from presidio_analyzer.predefined_recognizers import SpacyRecognizer; spacy_rec = SpacyRecognizer(); print('Spacy entities:', spacy_rec.supported_entities)\" && echo 'Step 3: Testing refined PHI patterns...' && echo 'Manual intervention required - check .github/instructions/tasks/debugging.instructions.md for solution patterns' && echo '‚úÖ PHI configuration analysis complete'"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Validate PHI Detection Fix",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo '‚úÖ Validating PHI Detection Fix...' && echo '1. Testing medical terminology (should pass)...' && cd services/user/healthcare-api && python3 -c \"from src.healthcare_mcp.phi_detection import sanitize_for_compliance; medical_terms = ['cardiovascular health', 'diabetes management', 'oncology treatment', 'neurological symptoms', 'respiratory therapy']; all_passed = True; print('Medical terminology test:'); [print(f'‚úÖ {term}: {\\\"PASS\\\" if not sanitize_for_compliance({\\\"content\\\": term}).get(\\\"sanitized\\\", False) else \\\"FAIL - INCORRECTLY FLAGGED\\\"}') or setattr(locals(), 'all_passed', False) for term in medical_terms if sanitize_for_compliance({\\\"content\\\": term}).get(\\\"sanitized\\\", False)]; print(f'Overall medical terms test: {\\\"‚úÖ PASS\\\" if locals().get(\\\"all_passed\\\", True) else \\\"‚ùå FAIL\\\"}')\" && echo '2. Testing actual PHI (should be blocked)...' && python3 -c \"from src.healthcare_mcp.phi_detection import sanitize_for_compliance; phi_examples = ['Patient John Doe', 'SSN: 123-45-6789', 'DOB: 01/01/1980', 'Phone: 555-123-4567']; phi_blocked = True; print('PHI blocking test:'); [print(f'üõ°Ô∏è {phi}: {\\\"PASS\\\" if sanitize_for_compliance({\\\"content\\\": phi}).get(\\\"sanitized\\\", False) else \\\"FAIL - NOT BLOCKED\\\"}') or setattr(locals(), 'phi_blocked', False) for phi in phi_examples if not sanitize_for_compliance({\\\"content\\\": phi}).get(\\\"sanitized\\\", False)]; print(f'Overall PHI blocking test: {\\\"‚úÖ PASS\\\" if locals().get(\\\"phi_blocked\\\", True) else \\\"‚ùå FAIL\\\"}')\" && echo '3. Testing system integration...' && curl -s -X POST http://localhost:8000/v1/chat/completions -H 'Content-Type: application/json' -d '{\\\"model\\\":\\\"healthcare\\\",\\\"messages\\\":[{\\\"role\\\":\\\"user\\\",\\\"content\\\":\\\"What are the symptoms of cardiovascular disease?\\\"}]}' | head -100 && echo '‚úÖ PHI detection validation complete'"
            ],
            "group": "test",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Debug MCP Container Architecture",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üîç MCP Container Architecture Debug...' && echo '1. Environment Detection...' && cd services/user/healthcare-api && python3 -c \"from core.mcp.direct_mcp_client import DirectMCPClient; client = DirectMCPClient(); print(f'Container environment: {client._is_container_environment()}'); print(f'MCP path detected: {client._detect_mcp_server_path()}')\" && echo '2. MCP Server Availability...' && if [ -f '/app/mcp-server/build/stdio_entry.js' ]; then echo '‚úÖ Container MCP server found'; elif [ -f '/home/intelluxe/services/user/healthcare-mcp/build/index.js' ]; then echo '‚úÖ Host MCP server found'; else echo '‚ùå MCP server not found'; fi && echo '3. Testing MCP Integration...' && python3 -c \"import asyncio; from core.mcp.direct_mcp_client import DirectMCPClient; asyncio.run(DirectMCPClient().debug_connection())\" || echo 'MCP debug completed (expected failure in host environment)' && echo '‚úÖ MCP architecture diagnosis complete'"
            ],
            "group": "test",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "Test Agent Iteration Limits",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üß™ Testing Agent Iteration Limits...' && echo 'Testing complex medical query that might hit iteration limits...' && curl -s -X POST http://localhost:8000/v1/chat/completions -H 'Content-Type: application/json' -d '{\"model\":\"healthcare\",\"messages\":[{\"role\":\"user\",\"content\":\"Can you help me find recent research on cardiovascular health and diabetes prevention?\"}]}' --max-time 120 | head -500 && echo '\\n‚úÖ Agent iteration test complete'"
            ],
            "group": "test",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "Autonomous MyPy Error Fixing",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'ü§ñ Autonomous MyPy Error Fixing Session...' && echo 'Step 1: Initial error count...' && mypy --config-file mypy.ini services/user/healthcare-api 2>&1 | wc -l && echo 'Step 2: Running systematic fixes...' && ruff format services/user/healthcare-api && ruff check --fix services/user/healthcare-api && echo 'Step 3: Post-fix error count...' && mypy --config-file mypy.ini services/user/healthcare-api 2>&1 | wc -l && echo 'Step 4: Final validation...' && mypy --config-file mypy.ini services/user/healthcare-api && echo '‚úÖ Autonomous MyPy session complete' || echo '‚ö†Ô∏è Errors remain - manual intervention may be needed'"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Container-Aware Integration Test",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üê≥ Container-Aware Integration Test...' && echo '1. Testing infrastructure components...' && cd services/user/healthcare-api && python3 -c \"from core.tools import tool_registry; from agents import BaseHealthcareAgent; from src.healthcare_mcp.phi_detection import sanitize_for_compliance; print('‚úÖ All infrastructure imports successful')\" && echo '2. Testing MCP integration with environment awareness...' && python3 tests/test_container_architecture_integration.py || echo 'Tests completed with expected host environment limitations' && echo '3. Testing PHI detection...' && python3 -c \"from src.healthcare_mcp.phi_detection import sanitize_for_compliance; result = sanitize_for_compliance({'content': 'test medical query'}); print(f'PHI detection working: {\\\"sanitized\\\" in result}')\" && echo '‚úÖ Container-aware integration test complete'"
            ],
            "group": "test",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        },
        {
            "label": "Open WebUI Medical Routing Debug",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo 'üè• Open WebUI Medical Routing Debug...' && echo '1. Testing healthcare API health...' && curl -s http://localhost:8000/health | head -200 && echo '\\n2. Testing direct medical query...' && curl -s -X POST http://localhost:8000/v1/chat/completions -H 'Content-Type: application/json' -d '{\"model\":\"healthcare\",\"messages\":[{\"role\":\"user\",\"content\":\"What are the symptoms of diabetes?\"}]}' --max-time 60 | head -300 && echo '\\n3. Checking agent logs for activity...' && tail -10 logs/agent_medical_search.log 2>/dev/null || echo 'No agent logs found' && echo '\\n4. Checking healthcare system logs...' && tail -10 logs/healthcare_system.log 2>/dev/null || echo 'No system logs found' && echo '\\n‚úÖ Open WebUI routing debug complete'"
            ],
            "group": "test",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "Quick Development Validation",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "echo '‚ö° Quick Development Validation...' && echo '1. Code formatting...' && ruff format services/user/healthcare-api --check && echo '2. Type checking (quick)...' && mypy --config-file mypy.ini services/user/healthcare-api --no-error-summary | head -20 && echo '3. Infrastructure test...' && cd services/user/healthcare-api && python3 -c \"from core.tools import tool_registry; from agents import BaseHealthcareAgent; print('‚úÖ Infrastructure imports working')\" && echo '4. PHI detection test...' && python3 -c \"from src.healthcare_mcp.phi_detection import sanitize_for_compliance; print('‚úÖ PHI detection available')\" && echo '‚úÖ Quick validation complete'"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": "$python"
        }
    ]
}