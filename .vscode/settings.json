{
  "continue.experimental.agentMode": "agent",
  "continue.experimental.toolsEnabled": true,
  "// Healthcare AI Development Environment": "Intelluxe AI Healthcare System",
  "// Shell and Script Configuration": "",
  "shellcheck.customArgs": ["-x", "--severity=info", "--source-path=SCRIPTDIR"],
  "shellcheck.enable": true,
  "shellcheck.enableQuickFix": true,
  "shellcheck.run": "onType",
  "shellcheck.executablePath": "shellcheck",
  "shellcheck.useWorkspaceRootAsCwd": true,
  "// Healthcare Data Protection": "",
  "files.exclude": {
    "**/logs/": true,
    "**/bats-core/": true,
    "**/.env": false,
    "**/secrets/**": true,
    "**/keys/**": true,
    "**/*.key": true,
    "**/*.pem": true,
    "**/patient_data/**": true,
    "**/data/phi/**": true,
    "**/node_modules/": true,
    "**/build/": false,
    "**/dist/": true,
    "**/.npm": true,
    "**/.cache": true,
    "**/coverage/": true,
    "**/*.tsbuildinfo": true,
    "reference/ai-patterns/**": false,
    "actions-runners/**": true
  },
  "files.watcherExclude": {
    "**/logs/": true,
    "**/bats-core/": true,
    "**/.env": true,
    "**/secrets/**": true,
    "**/keys/**": true,
    "**/*.key": true,
    "**/*.pem": true,
    "**/patient_data/**": true,
    "**/data/phi/**": true,
    "**/node_modules/": true,
    "**/build/": true,
    "**/dist/": true,
    "**/.npm": true,
    "**/.cache": true,
    "**/coverage/": true,
    "**/*.tsbuildinfo": true,
    "reference/ai-patterns/**": true,
    "actions-runners/**": true,
    "data/**": true
  },
  "search.exclude": {
    "**/logs/": true,
    "**/bats-core/": true,
    "**/data/phi/**": true,
    "**/backups/**": true,
    "**/secrets/**": true,
    "**/.env*": true,
    "mcps/**": true,
    "reference/ai-patterns/**": true,
    "actions-runners/**": true
  },
  "// Healthcare File Associations": "",
  "files.associations": {
    "*.py": "python",
    "*.phi": "plaintext",
    "*.hipaa": "yaml",
    "*.healthcare": "dockerfile",
    "*.conf": "properties"
  },
  "// Python Healthcare AI Configuration": "",
  "python.analysis.exclude": [
    "reference/ai-patterns/**",
    "services/user/whisperlive/**",
    "actions-runners/**"
  ],
  "python.defaultInterpreterPath": "/usr/bin/python3",
  "python.terminal.activateEnvironment": false,
  "python.linting.enabled": true,
  "python.linting.pylintEnabled": false,
  "python.linting.flake8Enabled": false,
  "python.linting.mypyEnabled": true,
  "python.linting.banditEnabled": true,
  "python.formatting.provider": "none",
  "// === Ruff Integration (Ultra-Fast Python Tooling) ===": "",
  "[python]": {
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit",
      "source.fixAll": "explicit",
      "source.fixAll.ruff": "explicit"
    },
    "editor.defaultFormatter": "ms-python.python"
  },
  "ruff.enable": true,
  "ruff.organizeImports": true,
  "ruff.fixAll": true,
  "ruff.showSyntaxErrors": true,
  "ruff.codeAction.fixViolation": {
    "enable": true
  },
  "ruff.codeAction.disableRuleComment": {
    "enable": true
  },
  "// === Legacy Black/isort Configuration (for migration reference) ===": "",
  "python.formatting.blackArgs": ["--line-length=100"],
  "python.sortImports.args": ["--profile", "black"],
  "python.analysis.diagnosticSeverityOverrides": {
    "reportMissingImports": "none",
    "reportUnusedImport": "none"
  },
  "pylint.args": [
    "--ignore-patterns=reference/ai-patterns/**,services/user/whisperlive/**,actions-runners/**"
  ],
  "python.linting.flake8Args": ["--config=.flake8"],
  "flake8.args": [
    "--exclude=reference/ai-patterns/**,services/user/whisperlive/**,actions-runners/**"
  ],
  "mypy.exclude": [
    "reference/ai-patterns/**",
    "services/user/whisperlive/**",
    "actions-runners/**"
  ],
  "// Medical Terminology and Healthcare Terms": "",
  "cSpell.words": [
    "Galdaer",
    "HIPAA",
    "PHI",
    "FHIR",
    "HL7",
    "ICD",
    "CPT",
    "SNOMED",
    "LOINC",
    "healthcare",
    "telehealth",
    "telemedicine",
    "EHR",
    "EMR",
    "diagnoses",
    "comorbidities",
    "contraindications",
    "pharmacokinetics",
    "dosimetry",
    "radiology",
    "pathology",
    "oncology",
    "cardiology",
    "endocrinology",
    "gastroenterology",
    "nephrology",
    "pulmonology",
    "dermatology",
    "neurology",
    "psychiatry",
    "orthopedics",
    "urology",
    "gynecology",
    "pediatrics",
    "geriatrics",
    "anesthesiology",
    "Intelluxe",
    "ollama",
    "llama",
    "mistral",
    "deepeval",
    "presidio",
    "psycopg",
    "redis",
    "fastapi",
    "uvicorn",
    "pydantic",
    "structlog",
    "cryptography",
    "fernet",
    "pbkdf",
    "scrypt",
    "asymmetric"
  ],
  "// GitHub Actions and Workflows": "",
  "github-actions.workflows.pinned.workflows": [
    ".github/workflows/shell-ci.yml"
  ],
  "// Editor Configuration for Healthcare Development": "",
  "workbench.editor.enablePreview": false,
  "workbench.editor.enablePreviewFromQuickOpen": true,
  "workbench.editor.limit.enabled": true,
  "workbench.editor.limit.value": 10,
  "workbench.editor.limit.excludeDirty": true,
  "workbench.editor.closeOnFileDelete": true,
  "workbench.editor.revealIfOpen": true,
  "editor.rulers": [80, 100],
  "editor.wordWrap": "wordWrapColumn",
  "editor.wordWrapColumn": 100,
  "editor.tabSize": 4,
  "editor.insertSpaces": true,
  "editor.detectIndentation": false,
  "editor.formatOnSave": true,
  "editor.formatOnPaste": true,
  "// Continue AI Configuration - Disable VS Code suggestions": "",
  "editor.quickSuggestions": {
    "other": false,
    "comments": false,
    "strings": false
  },
  "editor.acceptSuggestionOnCommitCharacter": false,
  "editor.acceptSuggestionOnEnter": "off",
  "editor.suggestOnTriggerCharacters": false,
  "editor.wordBasedSuggestions": "off",
  "editor.parameterHints.enabled": false,
  "// Disable language-specific suggestions": "",
  "python.analysis.autoImportCompletions": false,
  "python.analysis.completeFunctionParens": false,
  "// AI Assistant Configuration": "",
  "github.copilot.chat.enabled": true,
  "github.copilot.chat.instructionsFiles": [
    ".github/copilot-instructions.md",
    ".github/instructions/tasks/debugging.instructions.md",
    ".github/instructions/tasks/code-review.instructions.md",
    ".github/instructions/tasks/testing.instructions.md",
    ".github/instructions/tasks/refactoring.instructions.md",
    ".github/instructions/tasks/documentation.instructions.md",
    ".github/instructions/tasks/planning.instructions.md",
    ".github/instructions/tasks/performance.instructions.md",
    ".github/instructions/tasks/security-review.instructions.md",
    ".github/instructions/languages/python.instructions.md",
    ".github/instructions/domains/healthcare.instructions.md",
    ".github/instructions/agents/intake-agent.instructions.md",
    ".github/instructions/agents/document-processor.instructions.md"
  ],
  "github.copilot.enable": {
    "*": true,
    "yaml": true,
    "plaintext": false,
    "markdown": true,
    "python": true,
    "json": true,
    "dockerfile": true,
    "shellscript": true
  },
  "github.copilot.advanced": {
    "debug.overrideEngine": "copilot"
  },
  "github.copilot.editor.enableAutoCompletions": true,
  "github.copilot.editor.enableCodeActions": true,
  "github.copilot.chat.instructionEvolution.patterns": [
    "Use specialized instruction files based on task type for context-aware AI assistance",
    "Phase-aligned development approach: Phase 1 (Core AI), Phase 2 (Business Services), Phase 3 (Production)",
    "Healthcare compliance and PHI protection in all AI-generated code",
    "Autonomous remote agent execution without interruption for 2-4 hour work sessions",
    "Sequential thinking for complex implementation decisions and codebase analysis",
    "Analysis-first methodology with comprehensive codebase understanding before changes",
    "Incremental validation after each change with systematic error resolution",
    "Match existing codebase patterns exactly and preserve medical information context",
    "Modern development tools integration: Ruff for Python, pre-commit hooks, MyPy type safety",
    "CI environment detection and self-hosted runner optimization patterns",
    "Healthcare AI test isolation with synthetic data and Docker containers",
    "Universal service runner testing patterns for healthcare infrastructure",
    "Real implementations over mocks for Phase 1 MCP integration requirements"
  ],
  "github.copilot.chat.firewallConfiguration": {
    "enabled": true,
    "allowlistFile": ".github/copilot-firewall-allowlist.txt",
    "healthcareCompliance": true
  },
  "// Healthcare Testing Configuration": "",
  "python.testing.pytestEnabled": true,
  "python.testing.pytestArgs": ["tests/", "--verbose", "--tb=short"],
  "python.testing.unittestEnabled": false,
  "python.testing.autoTestDiscoverOnSaveEnabled": true,
  "// Security and Compliance": "",
  "security.workspace.trust.untrustedFiles": "prompt",
  "security.workspace.trust.banner": "always",
  "telemetry.telemetryLevel": "off",
  "// Healthcare Workflow Colors": "",
  "workbench.colorCustomizations": {
    "statusBar.background": "#005a9d",
    "statusBar.foreground": "#ffffff",
    "statusBar.debuggingBackground": "#ff6b6b",
    "statusBar.noFolderBackground": "#005a9d"
  },
  "// Git Performance Configuration": "",
  "git.ignoreLimitWarning": true,
  "git.useCommitInputAsStashMessage": true,
  "git.autofetch": false,
  "git.autorefresh": false,
  "git.enableCommitSigning": false,
  "scm.autoReveal": false,
  "git.fetchOnPull": false,
  "git.pruneOnFetch": false,
  "git.showProgress": false,
  "git.postCommitCommand": "none",
  "// Terminal Configuration": "",
  "terminal.integrated.defaultProfile.linux": "bash",
  "terminal.integrated.cwd": "${workspaceFolder}",
  "// Auto-save for Healthcare Safety": "",
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 30000,
  "typescript.preferences.includePackageJsonAutoImports": "off",
  "typescript.suggest.autoImports": false,
  "typescript.validate.enable": false,
  "mcpServers": {
    "healthcare-mcp": {
      "command": "npx",
      "args": ["@modelcontextprotocol/client-http", "http://localhost:3000"]
    }
  },
  "workbench.tree.renderIndentGuides": "none"
}
