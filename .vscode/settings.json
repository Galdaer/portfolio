{
    "shellcheck.customArgs": [
        "-x",
        "--severity=info",
        "--source-path=SCRIPTDIR"
    ],
    "shellcheck.enable": true,
    "shellcheck.enableQuickFix": true,
    "shellcheck.run": "onType",
    "shellcheck.executablePath": "shellcheck",
    "shellcheck.useWorkspaceRootAsCwd": true,
    "files.exclude": {
        "**/logs/": true,
        "**/bats-core/": true
    },
    "search.exclude": {
        "**/logs/": true,
        "**/bats-core/": true
    },
    "files.associations": {
        "*.py": "python"
    },
    "python.defaultInterpreterPath": "/usr/bin/python3",
    "python.terminal.activateEnvironment": false,
    "cSpell.words": [
        "Galdaer"
    ],
    "github-actions.workflows.pinned.workflows": [
        ".github/workflows/shell-ci.yml"
    ],
    "workbench.editor.enablePreview": false,
    "workbench.editor.enablePreviewFromQuickOpen": true,
    "workbench.editor.limit.enabled": true,
    "workbench.editor.limit.value": 10,
    "workbench.editor.limit.excludeDirty": true,
    "workbench.editor.closeOnFileDelete": true,
    "workbench.editor.revealIfOpen": true,
    
    "ai.instructions": {
        "project": "Intelluxe AI - Privacy-First Healthcare AI System built for on-premise clinical deployment. Currently in active development, focusing on core infrastructure and test suite hardening.",
        
        "healthcarePhilosophy": {
            "medicalSafety": "NO medical advice, diagnosis, or treatment recommendations - focus on administrative and documentation support only",
            "privacyFirst": "All PHI/PII remains on-premise - no cloud dependencies or external API calls with patient data",
            "explainableAI": "All AI decisions must be traceable and auditable for healthcare compliance",
            "modularDesign": "Pluggable agents and tools that can be customized per clinic without affecting core system",
            "developmentStatus": "Build robust, maintainable features for future clinical environments, but defer production-specific hardening until later phases"
        },

        "architecture": {
            "universalServiceRunner": "universal-service-runner.sh is the ONLY method for deploying services using .conf files from services/user/",
            "sourceCodeLocation": "Third-party service source code (like healthcare-mcp) is managed as git submodules in vendor/",
            "pythonWebUI": "config_web_ui.py creates .conf files directly, never uses legacy scripts",
            "noLegacyCode": "No plugin.sh files, no add-service.sh references - only universal service runner .conf-based approach"
        },

        "serviceManagement": {
            "healthcareServices": "Ollama (local LLM), AgentCare-MCP (medical tools), PostgreSQL (patient context), Redis (session cache), n8n (workflows)",
            "universalConfigOnly": "100% of services use pure .conf files configured through universal service runner",
            "securityFirst": "HIPAA-compliant service orchestration with audit logging and role-based access"
        },

        "coreAgents": {
            "intakeAgent": "Patient intake form processing and data extraction (administrative only)",
            "documentProcessor": "Medical document organization and PII redaction",
            "researchAssistant": "PubMed/FDA/ClinicalTrials.gov search and citation management",
            "billingHelper": "Billing code lookup and claims assistance (reference only)",
            "schedulingOptimizer": "Appointment scheduling and resource optimization"
        },

        "phaseImplementation": {
            "phase0": "Project setup and directory structure (PHASE_0.md)",
            "phase1": "Core AI infrastructure with Ollama, MCP, and basic agents (PHASE_1.md)",
            "phase2": "Business services, insurance verification, billing, and doctor personalization (PHASE_2.md)",
            "phase3": "Production deployment with enterprise scaling and compliance monitoring (PHASE_3.md)"
        },

        "directoryStructure": {
            "vendor/": "Source code for third-party services (git submodules like healthcare-mcp)",
            "services/user/": "Runtime configurations (.conf files) for all services",
            "core/": "Core Python infrastructure (orchestration, models, tools)",
            "agents/": "AI agent implementations (intake, document_processor, research_assistant, billing_helper, scheduling_optimizer)",
            "scripts/": "Primary shell scripts (universal-service-runner.sh, clinic-lib.sh, etc.)",
            "test/": "Bats tests for shell scripts",
            "docs/": "Project documentation (phase guides, architecture)",
            "reference/": "Reference patterns for adaptation (ai-patterns submodule)"
        },

        "testing": {
            "framework": "Use Bats framework for shell script integration testing",
            "realCodeOnly": "Tests MUST source functions from actual scripts in scripts/",
            "outputValidation": "Validate actual output of commands or file content, avoid unbound status variables",
            "healthcareTesting": "Test with realistic medical scenarios while avoiding actual patient data",
            "complianceTesting": "Validate HIPAA compliance, audit logging, and data handling practices"
        },

        "editingRules": {
            "readFirst": "ALWAYS read the file section before editing to understand context",
            "syntaxIntegrity": "NEVER break bash syntax (check if/fi, case/esac, loops) - use shellcheck",
            "incrementalChanges": "Make one logical change at a time, test after each change",
            "cleanup": "Remove unused functions/variables after refactoring"
        },

        "git": {
            "tracked": ".github/, .vscode/, docs/, scripts/, services/, systemd/, test/, vendor/",
            "ignored": "logs/, backups/, user-specific service data"
        },

        "developmentGuidelines": {
            "architectureReference": "Follow ARCHITECTURE_BASE_CODE.md for mapping AI Engineering Hub patterns to healthcare components",
            "accelerationToolkit": "Use DEV_ACCELERATION_TOOLKIT.md for rapid prototyping and best practices",
            "firewallAwareness": "All development must consider GitHub Actions firewall restrictions"
        },

        "instructionAwareness": "These instructions evolve with the codebase. Suggest updates when major architectural changes occur."
    }
}