{
    "shellcheck.customArgs": [
        "-x",
        "--severity=info",
        "--source-path=SCRIPTDIR"
    ],
    "shellcheck.enable": true,
    "shellcheck.enableQuickFix": true,
    "shellcheck.run": "onType",
    "shellcheck.executablePath": "shellcheck",
    "shellcheck.useWorkspaceRootAsCwd": true,
    "files.exclude": {
        "**/logs/": true,
        "**/bats-core/": true
    },
    "search.exclude": {
        "**/logs/": true,
        "**/bats-core/": true
    },
    "files.associations": {
        "*.py": "python"
    },
    "python.defaultInterpreterPath": "/usr/bin/python3",
    "python.terminal.activateEnvironment": false,
    "cSpell.words": [
        "Galdaer"
    ],
    "github-actions.workflows.pinned.workflows": [
        ".github/workflows/shell-ci.yml"
    ],
    "workbench.editor.enablePreview": false,
    "workbench.editor.enablePreviewFromQuickOpen": true,
    "workbench.editor.limit.enabled": true,
    "workbench.editor.limit.value": 10,
    "workbench.editor.limit.excludeDirty": true,
    "workbench.editor.closeOnFileDelete": true,
    "workbench.editor.revealIfOpen": true,
    
    "ai.instructions": {
        "project": "Intelluxe AI - Privacy-First Healthcare AI System built for on-premise clinical deployment. Currently in Phase 0 development, focusing on core infrastructure hardening and systemd service management.",
        
        "healthcarePhilosophy": {
            "medicalSafety": "NO medical advice, diagnosis, or treatment recommendations - focus on administrative and documentation support only",
            "privacyFirst": "All PHI/PII remains on-premise - no cloud dependencies or external API calls with patient data",
            "explainableAI": "All AI decisions must be traceable and auditable for healthcare compliance",
            "modularDesign": "Pluggable agents and tools that can be customized per clinic without affecting core system"
        },

        "phaseImplementation": {
            "currentPhase": "Phase 0 - Project setup and directory structure (docs/PHASE_0.md)",
            "phaseProgression": "Phase 1: Core AI infrastructure with Ollama, MCP, and basic agents (docs/PHASE_1.md), Phase 2: Business services, insurance verification, billing, and doctor personalization (docs/PHASE_2.md), Phase 3: Production deployment with enterprise scaling and compliance monitoring (docs/PHASE_3.md)",
            "developmentStatus": "Active Phase 0 development - build robust, maintainable features with proper development permissions (justin:intelluxe ownership model)"
        },

        "currentDevelopmentState": {
            "permissionModel": "Development files owned by justin:intelluxe (1000:1001), scripts 755, configs 660/664, logs 664",
            "groupManagement": "intelluxe group (1001) persists across sessions, family members added via 'sudo usermod -a -G intelluxe username'",
            "systemdApproach": "Symlinked installation to /etc/systemd/system/ with intelluxe- prefix, changes to source files immediately reflected",
            "serviceNaming": "Source files in systemd/ without prefix, symlinked as intelluxe-servicename.service",
            "developmentWorkflow": "make install (full setup), make fix-permissions (dev permissions), systemd changes auto-reflected via symlinks"
        },

        "serviceArchitecture": {
            "servicePattern": "Services configured at services/user/SERVICE/SERVICE.conf and deployed through universal-service-runner.sh by bootstrap.sh",
            "universalServiceRunner": "universal-service-runner.sh is the ONLY method for deploying services using .conf files from services/user/",
            "configLocation": "Each service has its own directory: services/user/SERVICE/ containing SERVICE.conf",
            "pythonWebUI": "config_web_ui.py creates .conf files directly in services/user/SERVICE/ directories",
            "deploymentFlow": "bootstrap.sh calls universal-service-runner.sh for each SERVICE.conf file found in services/user/",
            "rollingRestarts": "bootstrap.sh uses rolling restart mode - stops one service, starts it, waits for health, then moves to next service",
            "dependencyOrdering": "Services restart in dependency order: wireguard -> traefik -> config-web-ui -> whisper -> scispacy -> n8n -> grafana"
        },

        "codebaseStructure": {
            "referenceLibrary": "reference/ai-patterns/ - MIT licensed AI engineering patterns (git submodule from ai-engineering-hub) adapted for healthcare",
            "healthcareMCP": "mcps/healthcare/ - Healthcare MCP server code directly copied from agentcare-mcp repository",
            "architectureDocs": "docs/ARCHITECTURE_BASE_CODE.md - mapping AI Engineering Hub patterns to Intelluxe healthcare components",
            "accelerationToolkit": "docs/DEV_ACCELERATION_TOOLKIT.md - rapid prototyping, monitoring, quality assurance tools",
            "implementationGuide": "docs/IMPLEMENTATION_AND_TESTING.md - healthcare-specific testing and n8n workflows"
        },

        "systemdManagement": {
            "installationMethod": "Symlinked installation to /etc/systemd/system/ with intelluxe- prefix for development convenience",
            "serviceLifecycle": "install -> enable -> daemon-reload for new services, changes auto-reflected via symlinks",
            "cleanupProcess": "Disable -> stop -> remove symlinks -> daemon-reload for complete removal",
            "verificationScript": "systemd-verify.sh checks installed units in /etc/systemd/system/, validates symlinks and ownership",
            "developmentAdvantage": "Symlinks allow immediate reflection of .service/.timer changes without manual sync commands"
        },

        "healthcareServices": {
            "coreServices": "Ollama (local LLM), Healthcare-MCP (medical tools), PostgreSQL (patient context), Redis (session cache), n8n (workflows)",
            "securityFirst": "HIPAA-compliant service orchestration with audit logging and role-based access",
            "configurationOnly": "100% of services use pure .conf files in services/user/SERVICE/ directories"
        },

        "coreAgents": {
            "intakeAgent": "Patient intake form processing and data extraction (administrative only)",
            "documentProcessor": "Medical document organization and PII redaction",
            "researchAssistant": "PubMed/FDA/ClinicalTrials.gov search and citation management",
            "billingHelper": "Billing code lookup and claims assistance (reference only)",
            "schedulingOptimizer": "Appointment scheduling and resource optimization"
        },

        "directoryStructure": {
            "reference/ai-patterns/": "MIT licensed AI engineering patterns (git submodule)",
            "mcps/healthcare/": "Healthcare MCP server code (copied from agentcare-mcp)",
            "services/user/": "Service configurations - each service has services/user/SERVICE/SERVICE.conf",
            "core/": "Core Python infrastructure (orchestration, models, tools)",
            "agents/": "AI agent implementations",
            "scripts/": "Primary shell scripts (universal-service-runner.sh, lib.sh, bootstrap.sh, systemd-verify.sh)",
            "systemd/": "Source systemd unit files WITHOUT intelluxe- prefix",
            "test/": "Bats tests for shell scripts",
            "docs/": "Project documentation including PHASE_*.md, ARCHITECTURE_BASE_CODE.md, DEV_ACCELERATION_TOOLKIT.md",
            "stack/": "Runtime configuration and data directory"
        },

        "testingAndValidation": {
            "framework": "Use Bats framework for shell script integration testing",
            "realCodeOnly": "Tests MUST source functions from actual scripts in scripts/",
            "outputValidation": "Validate actual output of commands or file content, avoid unbound status variables",
            "systemdTesting": "Test with actual systemd unit installation and enablement",
            "permissionTesting": "Validate 1000:1001 ownership and group permissions work correctly"
        },

        "editingRules": {
            "readFirst": "ALWAYS read the file section before editing to understand context and current state",
            "syntaxIntegrity": "NEVER break bash syntax (check if/fi, case/esac, loops) - use shellcheck validation",
            "incrementalChanges": "Make one logical change at a time, test after each change",
            "cleanup": "Remove unused functions/variables after refactoring",
            "permissionAwareness": "Understand current justin:intelluxe ownership model before suggesting fixes",
            "systemdBestPractices": "Use direct file installation, avoid complex symlink schemes, enable services properly"
        },

        "commonMistakes": {
            "avoidSubdirectories": "Do NOT create /etc/systemd/system/intelluxe/ subdirectories - systemd doesn't discover them",
            "preferSymlinks": "Use symlinks instead of copying files for easier development workflow",
            "respectPermissions": "Don't suggest root:root ownership when justin:intelluxe development model is established",
            "validateChanges": "Always test systemctl commands after systemd changes",
            "readBeforeEdit": "Don't make assumptions about file contents - read first, then edit"
        },

        "git": {
            "tracked": ".github/, .vscode/, docs/, scripts/, services/, systemd/, test/, reference/ (submodule), mcps/",
            "ignored": "logs/, backups/, user-specific service data, /etc/systemd/system/intelluxe-* (installed files)"
        },

        "familyCollaboration": {
            "accessModel": "Father-son development team (Jeffrey & Justin Sue), group-based permissions for family access",
            "groupMembership": "Add family members to intelluxe group for full development access",
            "sharedWorkspace": "All family members can edit files, run make commands, and contribute to healthcare AI development"
        },

        "developmentWorkflow": {
            "initialSetup": "make install (creates users, groups, symlinks systemd units, sets permissions)",
            "permissionFixes": "make fix-permissions (fixes ownership without full reinstall)",
            "systemdChanges": "Edit .service/.timer files directly - changes automatically reflected via symlinks",
            "validation": "make systemd-verify (checks installed units and symlinks)",
            "debugging": "scripts/systemd-verify.sh --details for verbose systemd validation"
        },

        "instructionAwareness": "These instructions reflect lessons learned from extensive systemd and permission debugging. Update when architectural changes occur, but preserve hard-won knowledge about what actually works in practice."
    },
    "terminal.integrated.defaultProfile.linux": "bash"
}