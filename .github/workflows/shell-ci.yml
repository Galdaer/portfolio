name: Intelluxe CI

on:
  push:
    branches:
      - main
      - master
      - feature/*
      - develop
  pull_request:
    branches:
      - main
      - master

jobs:
  lint-test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for passwordless sudo
        run: |
          if ! sudo -n true 2>/dev/null; then
            echo "Passwordless sudo is required for CI. Please configure it for the runner user." >&2
            exit 1
          fi
      
      - name: Cache tool installs
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/bats
            ~/.cache/shfmt
            ~/.cache/uv
            ~/.local/bin
          key: ${{ runner.os }}-deps-${{ hashFiles('scripts/setup-environment.sh') }}-v3
      
      - name: Install dependencies
        run: |
          sudo apt-get update || true
          sudo apt-get install -y shellcheck git curl wget python3 python3-pip kcov || true
          
          # Install uv for faster Python package management
          curl -LsSf https://astral.sh/uv/install.sh | sh || echo "Warning: uv installation failed"
          
          # Install Python linting tools for healthcare AI (prefer uv for speed)
          if command -v uv >/dev/null 2>&1; then
            uv pip install --system flake8 mypy pytest pytest-asyncio || echo "Warning: uv installation failed, falling back to pip"
          fi
          # Fallback to pip if uv is not available or failed
          if ! command -v flake8 >/dev/null 2>&1; then
            python3 -m pip install --user flake8 mypy pytest pytest-asyncio || echo "Warning: Python linting tools failed to install"
          fi
          
          # Add to PATH for subsequent steps
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          
          # Try make deps but don't fail the CI if it fails
          make deps || echo "Warning: deps failed, continuing... (normal in CI)"
          
      - name: Verify linting tools
        run: |
          echo "Checking for linting tools..."
          which shellcheck || echo "shellcheck not found"
          which flake8 || echo "flake8 not found"
          which mypy || echo "mypy not found"
          which kcov || echo "kcov not found"
          which uv || echo "uv not found"
          shellcheck --version || echo "shellcheck version check failed"
          flake8 --version || echo "flake8 version check failed"
          mypy --version || echo "mypy version check failed"
          kcov --version || echo "kcov version check failed"
          uv --version || echo "uv version check failed"

      - name: Run lint (shell and Python)
        run: |
          make lint

      - name: Run validate
        env:
          CI: true
          GITHUB_ACTIONS: true
        run: |
          # Clean up any stale lock files from previous CI runs
          rm -f "$HOME/.cache/clinic-bootstrap.lock" "/tmp/clinic-bootstrap-$(whoami).lock" ".clinic-bootstrap.lock" || true
          sudo -E ./scripts/clinic-bootstrap.sh --validate --non-interactive

      - name: Configure Docker daemon for DNS
        run: |
          echo "Configuring Docker daemon for better DNS resolution..."
          # Ensure Docker daemon has proper DNS configuration
          sudo mkdir -p /etc/docker
          sudo tee /etc/docker/daemon.json > /dev/null <<EOF
          {
            "dns": ["1.1.1.1", "8.8.8.8", "8.8.4.4"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            }
          }
          EOF
          # Restart Docker if daemon.json was changed
          if [ -f /etc/docker/daemon.json ]; then
            sudo systemctl reload docker || sudo systemctl restart docker
            sleep 5
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-buildx-${{ hashFiles('Dockerfile.test') }}-v3
          restore-keys: |
            ${{ runner.os }}-docker-buildx-

      - name: Run tests
        env:
          CI: true
          GITHUB_ACTIONS: true
        run: |
          echo "Running test suite in Docker container for isolation"
          
          # Create isolated test network with DNS
          docker network create intelluxe-ci-test \
            --driver bridge \
            --opt com.docker.network.bridge.enable_icc=false \
            || echo "Network may already exist"
          
          # Test DNS connectivity before building
          echo "Testing DNS connectivity..."
          for dns in 1.1.1.1 8.8.8.8; do
            if timeout 5 nc -zv $dns 53 2>/dev/null; then
              echo "DNS server $dns is reachable"
            else
              echo "Warning: DNS server $dns is not reachable"
            fi
          done
          
          # Build test runner container with proper BuildKit caching and retries
          echo "Building test container with optimized caching..."
          build_success=false
          for attempt in 1 2 3; do
            echo "Build attempt $attempt/3..."
            
            if timeout 600 docker buildx build \
              --network=host \
              --tag intelluxe-test-runner:latest \
              --file Dockerfile.test \
              --cache-from type=local,src=/tmp/.buildx-cache \
              --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
              --load \
              --progress=plain \
              .; then
              echo "Build succeeded on attempt $attempt"
              build_success=true
              break
            else
              echo "Build attempt $attempt failed, exit code: $?"
              if [ $attempt -lt 3 ]; then
                echo "Cleaning up and retrying..."
                docker system prune -f
                sleep 10
              fi
            fi
          done
          
          # Fallback to simple build if buildx fails
          if [ "$build_success" = "false" ]; then
            echo "All buildx attempts failed, trying fallback build..."
            if timeout 600 docker build --network=host -t intelluxe-test-runner:latest -f Dockerfile.test .; then
              echo "Fallback build succeeded"
              build_success=true
            else
              echo "Fallback build also failed"
            fi
          fi
          
          # Move cache to avoid cache bloat
          if [ -d "/tmp/.buildx-cache-new" ]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi
          
          # Only run tests if build succeeded
          if [ "$build_success" = "true" ]; then
            echo "Container built successfully, running tests..."
            
            # Verify container image exists
            if ! docker image inspect intelluxe-test-runner:latest >/dev/null 2>&1; then
              echo "Error: Container image not found after build"
              exit 1
            fi
            
            # Run tests in completely isolated environment
            docker run --rm \
              --network=intelluxe-ci-test \
              --dns=1.1.1.1 \
              --dns=8.8.8.8 \
              -e CI=true \
              -e GITHUB_ACTIONS=true \
              -e DRY_RUN=true \
              -e CFG_ROOT=/tmp/test-config \
              -e LOG_DIR=/tmp/test-logs \
              -e TEST_ROOT=/tmp/intelluxe-test \
              -e BATS_TMPDIR=/tmp/bats-tmp \
              -e CI_SKIP_SYSTEM_TESTS=true \
              -v $PWD:/workspace:ro \
              -v $PWD/coverage:/workspace/coverage:rw \
              --tmpfs /tmp:rw,exec,nosuid,size=2G \
              intelluxe-test-runner:latest \
              bash -c "
                echo 'Setting up isolated test environment...'
                mkdir -p /tmp/test-config/{services,logs,backups}
                mkdir -p /tmp/test-logs /tmp/intelluxe-test /tmp/bats-tmp
                
                # Copy workspace to writable location for tests that need to modify files
                echo 'Copying workspace to writable location...'
                cp -r /workspace /tmp/workspace-rw
                chmod -R u+w /tmp/workspace-rw
                
                echo 'Running test suite with coverage...'
                cd /tmp/workspace-rw
                
                # Run tests with kcov for coverage (if available)
                if command -v kcov >/dev/null 2>&1; then
                  echo 'Running tests with kcov coverage...'
                  mkdir -p /workspace/coverage
                  # Set up proper source path mapping for kcov
                  export KCOV_PATH=/tmp/workspace-rw
                  # Run kcov with verbose output to debug issues
                  timeout 180 kcov \
                    --exclude-pattern=/usr,/lib,/bin,/sbin,/opt,/var,/etc,/home,/root,/tmp/bats \
                    --include-pattern=/tmp/workspace-rw/scripts \
                    --path-strip-level=3 \
                    --coveralls-id=\${GITHUB_RUN_ID:-local} \
                    --verify \
                    /workspace/coverage \
                    bats -r test/ || {
                      echo 'kcov with full test suite failed, trying with single test...'
                      timeout 60 kcov \
                        --exclude-pattern=/usr,/lib,/bin,/sbin,/opt,/var,/etc,/home,/root,/tmp/bats \
                        --include-pattern=/tmp/workspace-rw/scripts \
                        --path-strip-level=3 \
                        --coveralls-id=\${GITHUB_RUN_ID:-local} \
                        /workspace/coverage \
                        bats test/config-management.bats || {
                          echo 'kcov failed completely, running regular bats...'
                          timeout 120 bats -r test/ || echo 'Some tests failed'
                        }
                    }
                else
                  echo 'kcov not available, running regular bats...'
                  timeout 120 bats -r test/ || echo 'Some tests failed'
                fi
                
                echo 'Test execution completed'
                ls -la /workspace/coverage/ 2>/dev/null || echo 'No coverage directory'
                find /workspace/coverage -type f -name '*.html' 2>/dev/null | head -5 || echo 'No HTML files'
              "
            
            test_exit_code=$?
            echo "Tests completed with exit code: $test_exit_code"
          else
            echo "Container build failed, cannot run tests"
            exit 1
          fi
          
          # Cleanup test network
          docker network rm intelluxe-ci-test 2>/dev/null || echo "Network cleanup completed"
          
          # Check for coverage files
          echo "=== Checking for coverage files ==="
          if [ -d "./coverage" ]; then
            echo "Coverage directory exists"
            find ./coverage -name "*.html" -o -name "*.json" -o -name "*.xml" | head -10 || echo "No coverage files found"
            ls -la ./coverage/ || echo "Cannot list coverage directory"
            # Check if there are any files at all in coverage
            find ./coverage -type f | wc -l | xargs echo "Total files in coverage directory:"
          else
            echo "Coverage directory does not exist"
          fi

      - name: Debug coverage generation
        if: always()
        run: |
          echo "=== Coverage directory structure ==="
          find ./coverage -type f 2>/dev/null | head -20 || echo "No coverage files found"
          echo "=== Coverage HTML files ==="
          find ./coverage -name "*.html" 2>/dev/null || echo "No HTML files found"
          echo "=== Coverage JSON files ==="
          find ./coverage -name "*.json" 2>/dev/null || echo "No JSON files found"
          echo "=== Directory listing ==="
          ls -la ./coverage/ 2>/dev/null || echo "No coverage directory found"
          echo "=== Sample coverage file content ==="
          find ./coverage -name "index.html" -exec head -10 {} \; 2>/dev/null || echo "No index.html found"
          
          # Generate a coverage summary for the logs
          if [ -f "./coverage/index.html" ]; then
            echo "=== Coverage Summary ==="
            grep -o "pc_cov\">[0-9.]*%" ./coverage/index.html | head -5 || echo "Could not extract coverage percentages"
            echo "Coverage report generated successfully - see artifacts for full report"
          fi

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ./coverage/
          retention-days: 30

  healthcare-ai-tests:
    runs-on: self-hosted
    needs: lint-test
    steps:
      - uses: actions/checkout@v4
      
      - name: Healthcare AI Integration Tests
        env:
          CI: true
          GITHUB_ACTIONS: true
          INTELLUXE_MOCK_LLM: true
        run: |
          echo "Running healthcare AI integration tests with mocked LLMs..."
          
          # Test AgentCare-MCP tool configurations
          if [ -f "test/healthcare/test_agentcare_mcp.py" ]; then
            python3 -m pytest test/healthcare/test_agentcare_mcp.py -v --mock-llm
          fi
          
          # Test Ollama configurations
          if [ -f "test/healthcare/test_ollama_config.py" ]; then
            python3 -m pytest test/healthcare/test_ollama_config.py -v --mock-llm
          fi
          
          # Validate healthcare service configurations
          for service in ollama agentcare-mcp postgres redis n8n grafana influxdb; do
            echo "Validating $service configuration..."
            if [ -f "services/user/$service/$service.conf" ]; then
              echo "✓ $service config exists"
            else
              echo "⚠ $service config missing - will be created during deployment"
            fi
          done

  security-scan:
    runs-on: self-hosted
    needs: lint-test
    steps:
      - uses: actions/checkout@v4
      
      - name: Security Scan for Healthcare Compliance
        run: |
          echo "Running security scans for healthcare compliance..."
          
          # Check for hardcoded credentials
          echo "Checking for hardcoded credentials..."
          grep -r -i -E "(password|secret|key|token)\s*=\s*['\"][^'\"]+['\"]" \
            --include="*.sh" --include="*.py" --include="*.yml" --include="*.yaml" \
            --exclude-dir=".git" --exclude-dir="test" . || echo "✓ No hardcoded credentials found"
          
          # Check for PHI/PII exposure risks
          echo "Checking for potential PHI/PII exposure..."
          grep -r -i -E "(patient|ssn|social.?security|medical.?record)" \
            --include="*.log" --include="*.txt" --exclude-dir=".git" . || echo "✓ No PHI/PII found in logs"
          
          # Verify secure defaults
          echo "Verifying secure defaults..."
          if grep -q "INTELLUXE_SECURE_MODE=true" scripts/clinic-lib.sh; then
            echo "✓ Secure mode is enabled by default"
          else
            echo "⚠ Consider enabling secure mode by default"
          fi
          
          # Run healthcare-specific PHI exposure check
          echo "Running PHI exposure security scan..."
          if [ -f "scripts/check-phi-exposure.sh" ]; then
            chmod +x scripts/check-phi-exposure.sh
            ./scripts/check-phi-exposure.sh
          else
            echo "⚠ PHI exposure check script not found"
          fi

  e2e-tests:
    runs-on: self-hosted
    needs: [lint-test, healthcare-ai-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Run end-to-end tests
        env:
          CI: true
          GITHUB_ACTIONS: true
        run: make e2e
      
      - name: Upload bootstrap logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bootstrap-logs
          path: ./logs
      
      - name: Upload Intelluxe deployment artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: intelluxe-deployment-artifacts
          path: |
            /opt/intelluxe/clinic-stack/logs/
            /opt/intelluxe/clinic-stack/config/
          retention-days: 7