name: Copilot Setup Steps for Intelluxe AI Healthcare System

on:
  workflow_dispatch:
    inputs:
      setup_type:
        description: 'Type of Copilot setup to perform'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - network-only
        - permissions-only

permissions:
  contents: read
  actions: read
  checks: read
  pull-requests: read

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    name: Setup Copilot for Healthcare AI Development
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Network Access for Healthcare AI Dependencies
      run: |
        echo "=== Configuring Network Access for Intelluxe AI ==="
        
        # Core Ubuntu and Microsoft package repositories
        echo "Allowing access to Ubuntu and Microsoft package repositories..."
        
        # Ubuntu Archive and ESM repositories
        curl -f --connect-timeout 10 http://archive.ubuntu.com/ubuntu/ls-lR.gz > /dev/null || echo "Ubuntu archive check failed"
        curl -f --connect-timeout 10 https://esm.ubuntu.com/ > /dev/null || echo "Ubuntu ESM check failed"
        curl -f --connect-timeout 10 https://motd.ubuntu.com/ > /dev/null || echo "Ubuntu MOTD check failed"
        
        # Microsoft packages (for VS Code, .NET, etc.)
        curl -f --connect-timeout 10 https://packages.microsoft.com/ > /dev/null || echo "Microsoft packages check failed"
        
        # Healthcare AI specific repositories
        echo "Checking healthcare AI infrastructure dependencies..."
        
        # Docker Hub for healthcare container images
        curl -f --connect-timeout 10 https://registry-1.docker.io/v2/ > /dev/null || echo "Docker Hub check failed"
        
        # GitHub for healthcare AI repositories and releases
        curl -f --connect-timeout 10 https://api.github.com/repos/Galdaer/Intelluxe > /dev/null || echo "GitHub API check failed"
        
        # Python Package Index for healthcare AI dependencies
        curl -f --connect-timeout 10 https://pypi.org/simple/ > /dev/null || echo "PyPI check failed"
        
        # Node.js for n8n workflow automation
        curl -f --connect-timeout 10 https://registry.npmjs.org/ > /dev/null || echo "NPM registry check failed"
        
        # Ollama for local LLM infrastructure
        curl -f --connect-timeout 10 https://ollama.com/ > /dev/null || echo "Ollama check failed"
        
        echo "Network access verification completed"
        
    - name: Configure Copilot Domains and Allowlist
      run: |
        echo "=== Configuring Copilot Domain Allowlist ==="
        
        # Check if firewall allowlist file exists
        if [ -f ".github/copilot-firewall-allowlist.txt" ]; then
          echo "‚úì Using existing firewall allowlist configuration"
          cat .github/copilot-firewall-allowlist.txt
        else
          echo "Creating firewall allowlist configuration..."
          # Core required domains for Intelluxe AI development
          cat << 'EOF' > .github/copilot-firewall-allowlist.txt
        # Ubuntu Package Repositories (all mirrors and security updates)
        http._tcp.archive.ubuntu.com.
        https._tcp.archive.ubuntu.com.
        http._tcp.azure.archive.ubuntu.com.
        https._tcp.azure.archive.ubuntu.com.
        https._tcp.security.ubuntu.com.
        https._tcp.esm.ubuntu.com.
        https._tcp.motd.ubuntu.com.
        archive.ubuntu.com.
        azure.archive.ubuntu.com.
        security.ubuntu.com.
        esm.ubuntu.com.
        motd.ubuntu.com.
        
        # Microsoft Package Repository
        https._tcp.packages.microsoft.com.
        packages.microsoft.com.
        
        # Healthcare AI Infrastructure Domains
        https._tcp.github.com.
        https._tcp.api.github.com.
        https._tcp.raw.githubusercontent.com.
        github.com.
        api.github.com.
        raw.githubusercontent.com.
        
        # Docker Infrastructure for Healthcare Containers
        https._tcp.registry-1.docker.io.
        https._tcp.index.docker.io.
        https._tcp.docker.io.
        registry-1.docker.io.
        index.docker.io.
        docker.io.
        
        # Python Package Index for Healthcare AI Dependencies
        https._tcp.pypi.org.
        https._tcp.files.pythonhosted.org.
        pypi.org.
        files.pythonhosted.org.
        
        # Node.js for n8n Healthcare Workflow Automation
        https._tcp.registry.npmjs.org.
        https._tcp.nodejs.org.
        registry.npmjs.org.
        nodejs.org.
        
        # Ollama for Local LLM Infrastructure
        https._tcp.ollama.com.
        https._tcp.registry.ollama.ai.
        ollama.com.
        registry.ollama.ai.
        
        # PostgreSQL for Healthcare Data Management
        https._tcp.download.postgresql.org.
        https._tcp.ftp.postgresql.org.
        download.postgresql.org.
        ftp.postgresql.org.
        
        # Redis for Healthcare Session Management
        https._tcp.download.redis.io.
        download.redis.io.
        
        # Healthcare AI Model Repositories
        https._tcp.huggingface.co.
        https._tcp.cdn-lfs.huggingface.co.
        huggingface.co.
        cdn-lfs.huggingface.co.
        
        # Medical Research APIs (Read-only)
        https._tcp.pubmed.ncbi.nlm.nih.gov.
        https._tcp.clinicaltrials.gov.
        https._tcp.api.fda.gov.
        pubmed.ncbi.nlm.nih.gov.
        clinicaltrials.gov.
        api.fda.gov.
        
        # VS Code and Development Tools
        https._tcp.marketplace.visualstudio.com.
        https._tcp.vscode.dev.
        https._tcp.code.visualstudio.com.
        marketplace.visualstudio.com.
        vscode.dev.
        code.visualstudio.com.
        
        # Git and Version Control
        https._tcp.git-scm.com.
        git-scm.com.
        
        # Healthcare Compliance and Security Tools
        https._tcp.cve.mitre.org.
        https._tcp.nvd.nist.gov.
        cve.mitre.org.
        nvd.nist.gov.
        
        # Additional development tools and utilities
        https._tcp.astral.sh.
        https._tcp.get.docker.com.
        https._tcp.go.dev.
        astral.sh.
        get.docker.com.
        go.dev.
        EOF
        fi
        
        echo "Domain allowlist configured for healthcare AI development"
        echo ""
        echo "üìã MANUAL CONFIGURATION REQUIRED:"
        echo "To complete firewall configuration for GitHub Copilot:"
        echo "1. Go to your repository Settings ‚Üí Copilot"
        echo "2. Navigate to Firewall Configuration"
        echo "3. Upload or paste the contents of .github/copilot-firewall-allowlist.txt"
        echo "4. Save the configuration"
        echo ""
        echo "This will allow GitHub Copilot access to essential healthcare AI infrastructure"
        echo "including Ubuntu repositories, Python packages, Docker images, and development tools."
        
    - name: Apply Firewall Configuration for Healthcare AI
      run: |
        echo "=== Applying Firewall Configuration ==="
        
        # Create firewall configuration for GitHub Copilot environment
        # This follows GitHub's firewall configuration format
        echo "Configuring firewall allowlist for Intelluxe AI Healthcare System..."
        
        # Apply domain allowlist to environment
        # Note: In actual GitHub Actions environment, these would be applied 
        # by GitHub's infrastructure based on the domains specified
        
        # Test connectivity to critical healthcare AI infrastructure
        echo "Testing connectivity to essential healthcare AI domains..."
        
        # Test Ubuntu repositories (critical for apt-get operations)
        for domain in "archive.ubuntu.com" "azure.archive.ubuntu.com" "security.ubuntu.com"; do
          if timeout 10 curl -sSf "https://$domain/" >/dev/null 2>&1 || \
             timeout 10 curl -sSf "http://$domain/" >/dev/null 2>&1; then
            echo "‚úì $domain is accessible"
          else
            echo "‚ö†Ô∏è $domain may not be accessible (this is expected in firewall environments)"
          fi
        done
        
        # Test Microsoft packages (needed for some development tools)
        if timeout 10 curl -sSf "https://packages.microsoft.com/" >/dev/null 2>&1; then
          echo "‚úì Microsoft packages accessible"
        else
          echo "‚ö†Ô∏è Microsoft packages may not be accessible"
        fi
        
        # Test GitHub (critical for source control and releases)
        if timeout 10 curl -sSf "https://api.github.com/" >/dev/null 2>&1; then
          echo "‚úì GitHub API accessible"
        else
          echo "‚ö†Ô∏è GitHub API may not be accessible"
        fi
        
        echo "Firewall configuration applied for healthcare AI development"
        
    - name: Setup Healthcare AI Development Environment
      run: |
        echo "=== Setting up Healthcare AI Development Environment ==="
        
        # Verify Python for healthcare AI components
        python3 --version
        pip3 --version
        
        # Verify Node.js for n8n workflow automation
        node --version || echo "Node.js not available"
        npm --version || echo "NPM not available"
        
        # Verify Docker for healthcare container orchestration
        docker --version || echo "Docker not available"
        
        # Verify shell tools for Intelluxe AI scripts
        bash --version
        shellcheck --version || echo "ShellCheck not available"
        
        # Create development directories matching Intelluxe structure
        mkdir -p {agents,core,data,infrastructure,services,docs,test}
        
        echo "Healthcare AI development environment verification completed"
        
    - name: Validate Copilot Instructions
      run: |
        echo "=== Validating Copilot Instructions ==="
        
        if [ -f ".github/copilot-instructions.md" ]; then
          echo "‚úì Copilot instructions file found"
          echo "Instructions file size: $(wc -l < .github/copilot-instructions.md) lines"
          
          # Check for key healthcare AI sections
          if grep -q "Healthcare Philosophy" .github/copilot-instructions.md; then
            echo "‚úì Healthcare philosophy section found"
          fi
          
          if grep -q "Medical Safety" .github/copilot-instructions.md; then
            echo "‚úì Medical safety principles found"
          fi
          
          if grep -q "HIPAA" .github/copilot-instructions.md; then
            echo "‚úì HIPAA compliance guidelines found"
          fi
          
          if grep -q "PHI/PII" .github/copilot-instructions.md; then
            echo "‚úì Privacy protection guidelines found"
          fi
          
        else
          echo "‚ö†Ô∏è Copilot instructions file not found"
          exit 1
        fi
        
    - name: Setup Healthcare AI Compliance Checks
      run: |
        echo "=== Setting up Healthcare AI Compliance Checks ==="
        
        # Create compliance validation script
        cat << 'EOF' > compliance-check.sh
        #!/bin/bash
        
        echo "Performing healthcare AI compliance validation..."
        
        # Check for PHI/PII exposure in code
        echo "Checking for potential PHI/PII exposure..."
        if grep -r -i "ssn\|social.*security\|patient.*id\|medical.*record" --include="*.py" --include="*.sh" --include="*.js" . 2>/dev/null; then
          echo "‚ö†Ô∏è Potential PHI/PII references found - review for compliance"
        else
          echo "‚úì No obvious PHI/PII references found"
        fi
        
        # Check for external API calls that could leak data
        echo "Checking for external API calls..."
        if grep -r -i "requests\.\|curl.*http\|wget.*http" --include="*.py" --include="*.sh" . 2>/dev/null | grep -v localhost | grep -v 127.0.0.1; then
          echo "‚ö†Ô∏è External API calls found - verify no PHI/PII transmission"
        else
          echo "‚úì No external API calls detected"
        fi
        
        # Check for cloud service dependencies
        echo "Checking for cloud service dependencies..."
        if grep -r -i "aws\|azure\|gcp\|google.*cloud\|amazonaws" --include="*.py" --include="*.sh" --include="*.yml" . 2>/dev/null; then
          echo "‚ö†Ô∏è Cloud service references found - verify on-premise compliance"
        else
          echo "‚úì No cloud service dependencies detected"
        fi
        
        echo "Healthcare AI compliance check completed"
        EOF
        
        chmod +x compliance-check.sh
        ./compliance-check.sh
        
    - name: Setup Development Tools for Healthcare AI
      run: |
        echo "=== Setting up Development Tools for Healthcare AI ==="
        
        # Install Python packages for healthcare AI development
        pip3 install --user flake8 mypy pytest pytest-cov black
        
        # Verify healthcare AI specific tools
        echo "Python linting tools installed for code quality"
        flake8 --version
        mypy --version
        pytest --version
        black --version
        
        # Setup shell linting for Intelluxe AI scripts
        if command -v shellcheck >/dev/null 2>&1; then
          echo "‚úì ShellCheck available for shell script validation"
        else
          echo "‚ö†Ô∏è ShellCheck not available - install for script validation"
        fi
        
    - name: Generate Development Summary
      run: |
        echo "=== Intelluxe AI Healthcare System - Copilot Setup Summary ==="
        echo ""
        echo "üè• **HEALTHCARE AI DEVELOPMENT ENVIRONMENT READY**"
        echo ""
        echo "**Project**: Intelluxe AI - Privacy-First Healthcare AI System"
        echo "**Focus**: On-premise clinical deployment with administrative support"
        echo "**Safety**: NO medical advice - administrative/documentation only"
        echo ""
        echo "**Key Components Configured:**"
        echo "- ‚úì Network access for healthcare AI dependencies"
        echo "- ‚úì Domain allowlist for secure development"
        echo "- ‚úì HIPAA compliance validation tools"
        echo "- ‚úì Privacy protection guidelines"
        echo "- ‚úì Development environment verification"
        echo ""
        echo "**Next Steps:**"
        echo "1. Review .github/copilot-instructions.md for development guidelines"
        echo "2. Follow PHASE_0.md through PHASE_3.md for implementation roadmap"
        echo "3. Use universal-service-runner.sh for all service deployments"
        echo "4. Test with clinic-bootstrap.sh for infrastructure setup"
        echo "5. Validate compliance with ./compliance-check.sh"
        echo ""
        echo "**Remember**: All PHI/PII must remain on-premise!"
        echo "**Medical Safety**: No diagnosis, treatment, or medical advice features!"
        echo ""
        echo "Happy healthcare AI development! üî¨ü§ñ"

env:
  # Healthcare AI specific environment variables
  INTELLUXE_ENV: development
  HEALTHCARE_COMPLIANCE: enabled
  PHI_PROTECTION: strict
  
  # Development tool configurations
  PYTHONPATH: /home/runner/work/Intelluxe/Intelluxe
  NODE_ENV: development
  
  # Security configurations
  DISABLE_EXTERNAL_APIS: true
  ENABLE_AUDIT_LOGGING: true
