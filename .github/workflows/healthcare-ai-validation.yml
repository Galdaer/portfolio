name: Healthcare AI Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  type-safety-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/bin
        key: ${{ runner.os }}-python-${{ hashFiles('requirements.txt', 'requirements.in') }}-v1
        restore-keys: |
          ${{ runner.os }}-python-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Install uv for faster Python package management
        curl -LsSf https://astral.sh/uv/install.sh | sh || echo "Warning: uv installation failed"
        
        # Install Python tools with uv (preferred) or pip (fallback)
        if command -v uv >/dev/null 2>&1; then
          uv pip install --system --break-system-packages flake8 mypy pydantic fastapi pytest pytest-asyncio || echo "Warning: uv installation failed, falling back to pip"
        fi
        # Fallback to pip if uv is not available or failed
        if ! command -v flake8 >/dev/null 2>&1; then
          python3 -m pip install --user --break-system-packages flake8 mypy pydantic fastapi pytest pytest-asyncio || echo "Warning: Python tools failed to install"
        fi
        
        # Add to PATH for subsequent steps
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
        pip install -r requirements.txt || echo "No requirements.txt found"
    
    - name: Verify tools installation
      run: |
        echo "Checking for tools..."
        which flake8 || echo "flake8 not found"
        which mypy || echo "mypy not found"
        flake8 --version || echo "flake8 version check failed"
        mypy --version || echo "mypy version check failed"
    
    - name: Type Safety Check (Python Compilation)
      run: |
        find src/ -name "*.py" -exec python -m py_compile {} \; || echo "No src/ directory"
        find agents/ -name "*.py" -exec python -m py_compile {} \; || echo "No agents/ directory"
        find mcps/ -name "*.py" -exec python -m py_compile {} \; || echo "No mcps/ directory"
    
    - name: Healthcare Code Quality (Flake8)
      run: |
        flake8 src/ --max-line-length=100 --exclude=__pycache__,*.pyc || echo "No src/ directory"
        flake8 agents/ --max-line-length=100 --exclude=__pycache__,*.pyc || echo "No agents/ directory"
        flake8 mcps/ --max-line-length=100 --exclude=__pycache__,*.pyc || echo "No mcps/ directory"
    
    - name: Type Checking (MyPy)
      run: |
        # Check if directories exist before running mypy
        error_count=0
        
        if [ -d "src/" ]; then
          echo "Running MyPy on src/..."
          if ! mypy src/ --ignore-missing-imports --strict-optional; then
            echo "❌ MyPy errors found in src/"
            ((error_count++))
          fi
        else
          echo "⚠️  No src/ directory found"
        fi
        
        if [ -d "agents/" ]; then
          echo "Running MyPy on agents/..."
          if ! mypy agents/ --ignore-missing-imports --strict-optional; then
            echo "❌ MyPy errors found in agents/"
            ((error_count++))
          fi
        else
          echo "⚠️  No agents/ directory found"
        fi
        
        if [ -d "mcps/" ]; then
          echo "Running MyPy on mcps/..."
          if ! mypy mcps/ --ignore-missing-imports --strict-optional; then
            echo "❌ MyPy errors found in mcps/"
            ((error_count++))
          fi
        else
          echo "⚠️  No mcps/ directory found"
        fi
        
        if [ $error_count -gt 0 ]; then
          echo "💥 MyPy validation failed with $error_count error(s)"
          exit 1
        else
          echo "✅ MyPy validation passed"
        fi

    - name: Healthcare Security Pattern Validation
      run: |
        error_count=0
        
        echo "🏥 Validating Healthcare Compliance Implementation..."
        
        # Check PHI detection is properly enabled
        if ! grep -q 'phi_detection_enabled.*=.*True\|PHI_DETECTION_ENABLED.*true' src/healthcare_mcp/; then
          echo "❌ PHI detection not properly enabled in MCP server"
          ((error_count++))
        else
          echo "✅ PHI detection enabled"
        fi
        
        # Check audit logging is configured
        if ! grep -q 'audit_logging.*=.*True\|AUDIT_LOGGING_LEVEL' src/security/ src/healthcare_mcp/; then
          echo "❌ Audit logging not properly configured"
          ((error_count++))
        else
          echo "✅ Audit logging configured"
        fi
        
        # Check HIPAA compliance mode
        if ! grep -q 'hipaa_compliance_mode.*=.*strict\|HIPAA_COMPLIANCE_MODE.*strict' src/healthcare_mcp/; then
          echo "❌ HIPAA compliance not in strict mode"
          ((error_count++))
        else
          echo "✅ HIPAA compliance in strict mode"
        fi
        
        # Verify PHI detection classes exist and are importable
        if python3 -c "import sys; sys.path.append('src'); from healthcare_mcp.phi_detection import PHIDetector; PHIDetector(); print('✅ PHI detection functional')" 2>/dev/null; then
          echo "✅ PHI detection classes functional"
        else
          echo "❌ PHI detection classes not functional"
          ((error_count++))
        fi
        
        # Verify RBAC foundation exists
        if python3 -c "import sys; sys.path.append('src'); from security.rbac_foundation import RBACFoundation; print('✅ RBAC foundation available')" 2>/dev/null; then
          echo "✅ RBAC foundation functional"
        else
          echo "❌ RBAC foundation not functional"
          ((error_count++))
        fi
        
        # Check for healthcare security middleware
        if python3 -c "import sys; sys.path.append('src'); from security.healthcare_security import HealthcareSecurityMiddleware; print('✅ Healthcare security middleware available')" 2>/dev/null; then
          echo "✅ Healthcare security middleware functional"
        else
          echo "❌ Healthcare security middleware not functional"
          ((error_count++))
        fi
        
        if [ $error_count -gt 0 ]; then
          echo "💥 Healthcare compliance validation failed with $error_count error(s)"
          echo "🚨 This system would not be HIPAA compliant if deployed"
          exit 1
        else
          echo "✅ Healthcare compliance validation passed"
          echo "🏥 System meets HIPAA compliance requirements"
        fi

  healthcare-integration-tests:
    runs-on: ubuntu-latest
    needs: type-safety-validation
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup CI Environment
      run: |
        echo "=== Setting up CI Environment ==="
        echo "User: $(whoami)"
        echo "UID: $(id -u)"
        echo "Groups: $(groups)"
        
        # Set CI-specific environment variables
        echo "CI_NO_SUDO=true" >> $GITHUB_ENV
        echo "SKIP_ROOT_CHECKS=true" >> $GITHUB_ENV
        echo "SKIP_GPU_PACKAGES=true" >> $GITHUB_ENV
        echo "ENVIRONMENT=development" >> $GITHUB_ENV
        echo "CFG_ROOT=/tmp/intelluxe-stack" >> $GITHUB_ENV
        echo "CFG_UID=1000" >> $GITHUB_ENV
        echo "CFG_GID=1001" >> $GITHUB_ENV
        echo "CI_SKIP_DEPS=true" >> $GITHUB_ENV
    
    - name: Install System Dependencies
      run: |
        # Install only essential packages for CI (matching shell-ci.yml pattern)
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          lsof socat wireguard-tools shellcheck \
          python3-flake8 python3-pytest python3-yaml \
          python3-cryptography python3-psycopg2
    
    - name: Healthcare AI Integration Test
      env:
        CI: true
        GITHUB_ACTIONS: true
        ENVIRONMENT: development
        CFG_ROOT: /tmp/intelluxe-stack
        CFG_UID: 1000
        CFG_GID: 1001
        SKIP_GPU_PACKAGES: true
        CI_SKIP_DEPS: true
        CI_SKIP_SYSTEM_TESTS: true
      run: |
        # Create directories without sudo
        mkdir -p /tmp/intelluxe-stack/{logs,backups,qrcodes}
        mkdir -p /tmp/wireguard
        
        export CFG_ROOT=/tmp/intelluxe-stack
        export CI=true
        export GITHUB_ACTIONS=true
        
        # Skip make deps entirely in CI and run tests directly
        echo "Skipping dependency installation in CI"
        
        # Run validation without Docker checks
        timeout 10m ./scripts/bootstrap.sh --validate --non-interactive --skip-docker-check --dry-run
        
        # Run tests with CI-specific environment (fix the CI=true syntax)
        timeout 10m bash ./scripts/test.sh
    
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: healthcare-ai-coverage
        path: coverage/
        retention-days: 30

# Environment variables for healthcare AI development
env:
  INTELLUXE_CI_MODE: true
  HEALTHCARE_COMPLIANCE: enabled
  PHI_PROTECTION: strict
  ENVIRONMENT: development
  CI: true
