name: Healthcare AI Validation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, develop]

jobs:
  # Fast dependency setup - shared by all other jobs
  setup-dependencies:
    runs-on: self-hosted
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
      python-version: "3.12"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache Python dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            /tmp/ci-python-${{ github.run_id }}
          key: ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}-v8
          restore-keys: |
            ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}
            ${{ runner.os }}-python-ci-optimized-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

          # Create isolated CI environment to avoid conflicts
          echo "Creating isolated CI Python environment..."
          export CI_PYTHON_PATH="/tmp/ci-python-${{ github.run_id }}"
          mkdir -p "$CI_PYTHON_PATH"

          # Install Python tools with isolated path to avoid system conflicts
          echo "Installing CI-optimized Python tools..."
          python3 -m pip install --target="$CI_PYTHON_PATH" flake8 mypy pytest pytest-asyncio types-requests types-PyYAML || echo "Warning: Python tools failed to install"

          # Add isolated path to GITHUB_PATH for subsequent steps
          echo "$CI_PYTHON_PATH" >> $GITHUB_PATH
          echo "PYTHONPATH=$CI_PYTHON_PATH:$PYTHONPATH" >> $GITHUB_ENV

          # Install CI-optimized dependencies only to isolated location
          if [ -f "requirements-ci.txt" ]; then
            echo "Installing lightweight CI requirements to isolated location..."
            python3 -m pip install --target="$CI_PYTHON_PATH" -r requirements-ci.txt || echo "CI requirements installation completed with warnings"
          else
            echo "‚ö†Ô∏è  requirements-ci.txt not found - using full requirements (will be slow)"
            python3 -m pip install --target="$CI_PYTHON_PATH" -r requirements.txt || echo "Requirements installation completed with warnings"
          fi

      - name: Cache effectiveness report
        run: |
          echo "=== Post-Installation Cache Report ==="
          export CI_PYTHON_PATH="/tmp/ci-python-${{ github.run_id }}"
          if [ -d "$CI_PYTHON_PATH" ]; then
            echo "üìä CI isolated environment size: $(du -sh "$CI_PYTHON_PATH" || echo 'unknown')"
            echo "üì¶ Installed packages: $(find "$CI_PYTHON_PATH" -name "*.dist-info" | wc -l) packages"
            echo "üéØ Caching only CI-optimized isolated environment (not global pip cache)"
          else
            echo "‚ö†Ô∏è  CI isolated environment not found"
          fi

          # Show what we're actually caching vs not caching
          if [ -d ~/.cache/pip ]; then
            echo "‚ÑπÔ∏è  Global pip cache size (NOT cached): $(du -sh ~/.cache/pip || echo 'unknown')"
          fi
          echo "‚ö° Cache should be much smaller and faster on subsequent runs"

  # Fast Python syntax validation - parallel matrix for speed
  python-syntax-validation:
    runs-on: self-hosted
    needs: setup-dependencies
    strategy:
      fail-fast: false
      matrix:
        directory: [src, agents, mcps]
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            /tmp/ci-python-${{ github.run_id }}
          key: ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}-v8
          restore-keys: |
            ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}
            ${{ runner.os }}-python-ci-optimized-
      - name: Setup Python PATH
        run: |
          # Use the isolated CI Python environment created by setup-dependencies
          export CI_PYTHON_PATH="/tmp/ci-python-${{ github.run_id }}"
          echo "$CI_PYTHON_PATH" >> $GITHUB_PATH
          echo "PYTHONPATH=$CI_PYTHON_PATH:$PYTHONPATH" >> $GITHUB_ENV

      - name: Python Syntax Check - ${{ matrix.directory }}
        run: |
          if [ -d "${{ matrix.directory }}/" ]; then
            echo "üêç Checking Python syntax in ${{ matrix.directory }}/"
            find ${{ matrix.directory }}/ -name "*.py" -exec python -m py_compile {} \;
            echo "‚úÖ Python syntax valid in ${{ matrix.directory }}/"
          else
            echo "‚ö†Ô∏è  Directory ${{ matrix.directory }}/ not found - skipping"
          fi

  # Python quality checks - parallel matrix for speed on self-hosted runner
  python-quality-validation:
    runs-on: self-hosted
    needs: setup-dependencies
    strategy:
      fail-fast: false
      matrix:
        tool: [flake8, mypy]
        directory: [src, agents, mcps]
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            /tmp/ci-python-${{ github.run_id }}
          key: ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}-v8
          restore-keys: |
            ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}
            ${{ runner.os }}-python-ci-optimized-
      - name: Setup Python PATH
        run: |
          # Use the isolated CI Python environment created by setup-dependencies
          export CI_PYTHON_PATH="/tmp/ci-python-${{ github.run_id }}"
          echo "$CI_PYTHON_PATH" >> $GITHUB_PATH
          echo "PYTHONPATH=$CI_PYTHON_PATH:$PYTHONPATH" >> $GITHUB_ENV

      - name: Python Quality Check - ${{ matrix.tool }} on ${{ matrix.directory }}
        run: |
          # Ensure tools are available in PATH from isolated CI environment
          export CI_PYTHON_PATH="/tmp/ci-python-${{ github.run_id }}"
          export PATH="$CI_PYTHON_PATH:$PATH"

          if [ -d "${{ matrix.directory }}/" ] && [ "$(find ${{ matrix.directory }}/ -name '*.py' | head -1)" ]; then
            echo "ÔøΩ Running ${{ matrix.tool }} on ${{ matrix.directory }}/"

            if [ "${{ matrix.tool }}" = "flake8" ]; then
              if command -v flake8 >/dev/null 2>&1; then
                FLAKE8_CMD="flake8"
              else
                FLAKE8_CMD="python3 -m flake8"
              fi
              if $FLAKE8_CMD ${{ matrix.directory }}/ --max-line-length=100 --exclude=__pycache__,*.pyc; then
                echo "‚úÖ Flake8 passed for ${{ matrix.directory }}/"
              else
                echo "‚ùå Flake8 issues found in ${{ matrix.directory }}/ - Phase 1 requires clean code"
                exit 1
              fi
            elif [ "${{ matrix.tool }}" = "mypy" ]; then
              if command -v mypy >/dev/null 2>&1; then
                MYPY_CMD="mypy"
              else
                MYPY_CMD="python3 -m mypy"
              fi
              if $MYPY_CMD ${{ matrix.directory }}/ --ignore-missing-imports --strict-optional; then
                echo "‚úÖ MyPy passed for ${{ matrix.directory }}/"
              else
                echo "‚ùå MyPy issues found in ${{ matrix.directory }}/ - Phase 1 requires type safety"
                exit 1
              fi
            fi
          else
            echo "‚ö†Ô∏è  No Python files found in ${{ matrix.directory }}/ - skipping"
          fi

  # Healthcare Security Validation - comprehensive security checks
  healthcare-security-comprehensive:
    runs-on: self-hosted
    needs: setup-dependencies
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            /tmp/ci-python-${{ github.run_id }}
          key: ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}-v8
          restore-keys: |
            ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}
            ${{ runner.os }}-python-ci-optimized-
      - name: Setup Python PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Comprehensive Healthcare Security Validation
        run: |
          echo "üè• Running comprehensive healthcare security validation..."

          total_security_errors=0

          # 1. RBAC Foundation Check
          echo ""
          echo "üîê Checking RBAC Foundation..."
          if [ -f "src/security/rbac_foundation.py" ]; then
            if python3 -c "import sys; sys.path.append('src'); from security.rbac_foundation import RBACFoundation; print('‚úÖ RBAC foundation available')" 2>/dev/null; then
              echo "‚úÖ RBAC foundation functional"
            else
              echo "‚ùå RBAC foundation module exists but not functional - Phase 1 requires working RBAC"
              exit 1
            fi
          else
            echo "‚ùå RBAC foundation not implemented - Phase 1 requires security foundation"
            exit 1
          fi

          if [ -d "src/security/" ] && [ "$(find src/security/ -type f -name '*.py' | head -1)" ]; then
            if grep -r -q 'role.*=.*\|permission.*=.*\|rbac' src/security/ 2>/dev/null; then
              echo "‚úÖ RBAC patterns found in security modules"
            else
              echo "‚ÑπÔ∏è  RBAC patterns not yet implemented (Phase 0 - expected)"
            fi
          fi

          # 2. Healthcare Security Middleware Check
          echo ""
          echo "üõ°Ô∏è  Checking Healthcare Security Middleware..."
          if [ -f "src/security/healthcare_security.py" ]; then
            if python3 -c "import sys; sys.path.append('src'); from security.healthcare_security import HealthcareSecurityMiddleware; print('‚úÖ Healthcare security middleware available')" 2>/dev/null; then
              echo "‚úÖ Healthcare security middleware functional"
            else
              echo "‚ùå Healthcare security middleware module exists but not functional - Phase 1 requires working security"
              exit 1
            fi
          else
            echo "‚ùå Healthcare security middleware not implemented - Phase 1 requires security middleware"
            exit 1
          fi

          if [ -d "src/security/" ] && [ "$(find src/security/ -type f -name '*.py' | head -1)" ]; then
            if grep -r -q 'middleware.*=.*\|HealthcareSecurity\|audit.*middleware' src/security/ 2>/dev/null; then
              echo "‚úÖ Security middleware patterns found"
            else
              echo "‚ÑπÔ∏è  Security middleware patterns not yet implemented (Phase 0 - expected)"
            fi
          fi

          # 3. PHI Detection Check
          echo ""
          echo "üîç Checking PHI Detection..."
          if [ -d "src/healthcare_mcp/" ] && [ "$(find src/healthcare_mcp/ -type f | head -1)" ]; then
            if grep -r -q 'phi_detection_enabled.*=.*True\|PHI_DETECTION_ENABLED.*true' src/healthcare_mcp/ 2>/dev/null; then
              echo "‚úÖ PHI detection properly enabled"
            else
              echo "‚ùå PHI detection not properly enabled in MCP server"
              ((total_security_errors++))
            fi

            if [ -f "src/healthcare_mcp/phi_detection.py" ]; then
              if python3 -c "import sys; sys.path.append('src'); from healthcare_mcp.phi_detection import PHIDetector; PHIDetector(); print('‚úÖ PHI detection functional')" 2>/dev/null; then
                echo "‚úÖ PHI detection classes functional"
              else
                echo "‚ùå PHI detection classes not functional"
                ((total_security_errors++))
              fi
            else
              echo "‚ö†Ô∏è  PHI detection module not found"
            fi
          else
            echo "‚ö†Ô∏è  No healthcare_mcp directory found - skipping PHI detection check"
          fi

          # 4. Audit Logging Check
          echo ""
          echo "üìù Checking Audit Logging Configuration..."
          audit_found=false

          if [ -d "src/security/" ] && [ "$(find src/security/ -type f | head -1)" ]; then
            if grep -r -q 'audit_logging.*=.*True\|AUDIT_LOGGING_LEVEL' src/security/ 2>/dev/null; then
              audit_found=true
            fi
          fi

          if [ -d "src/healthcare_mcp/" ] && [ "$(find src/healthcare_mcp/ -type f | head -1)" ]; then
            if grep -r -q 'audit_logging.*=.*True\|AUDIT_LOGGING_LEVEL' src/healthcare_mcp/ 2>/dev/null; then
              audit_found=true
            fi
          fi

          if [ "$audit_found" = true ]; then
            echo "‚úÖ Audit logging properly configured"
          elif [ -d "src/security/" ] || [ -d "src/healthcare_mcp/" ]; then
            echo "‚ùå Audit logging not properly configured"
            ((total_security_errors++))
          else
            echo "‚ö†Ô∏è  No security directories found - skipping audit logging check"
          fi

          # 5. HIPAA Compliance Check
          echo ""
          echo "üè• Checking HIPAA Compliance Mode..."
          if [ -d "src/healthcare_mcp/" ] && [ "$(find src/healthcare_mcp/ -type f | head -1)" ]; then
            if grep -r -q 'hipaa_compliance_mode.*=.*strict\|HIPAA_COMPLIANCE_MODE.*strict' src/healthcare_mcp/ 2>/dev/null; then
              echo "‚úÖ HIPAA compliance in strict mode"
            else
              echo "‚ùå HIPAA compliance not in strict mode"
              ((total_security_errors++))
            fi
          else
            echo "‚ö†Ô∏è  No healthcare_mcp directory found - skipping HIPAA compliance check"
          fi

          # Summary
          echo ""
          echo "üè• Healthcare Security Summary:"
          echo "================================"
          if [ $total_security_errors -eq 0 ]; then
            echo "‚úÖ Healthcare security comprehensive validation PASSED"
            echo "üîí All critical security checks completed successfully"
          else
            echo "‚ùå Healthcare security issues found ($total_security_errors critical errors)"
            echo "üö® Security compliance requirements not met"
            exit 1
          fi

  # Infrastructure and Shell Testing - comprehensive validation
  infrastructure-comprehensive:
    runs-on: self-hosted
    needs: setup-dependencies
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            /tmp/ci-python-${{ github.run_id }}
          key: ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}-v8
          restore-keys: |
            ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}
            ${{ runner.os }}-python-ci-optimized-

      - name: Setup Python PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Setup CI Environment
        run: |
          echo "=== Setting up CI Environment ==="

          # Set CI-specific environment variables
          echo "CI_NO_SUDO=true" >> $GITHUB_ENV
          echo "SKIP_ROOT_CHECKS=true" >> $GITHUB_ENV
          echo "SKIP_GPU_PACKAGES=true" >> $GITHUB_ENV
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "CFG_ROOT=/tmp/intelluxe-stack" >> $GITHUB_ENV
          echo "CFG_UID=1000" >> $GITHUB_ENV
          echo "CFG_GID=1001" >> $GITHUB_ENV
          echo "CI_SKIP_DEPS=true" >> $GITHUB_ENV
          echo "CI_SKIP_SYSTEM_TESTS=true" >> $GITHUB_ENV
          echo "SKIP_WIREGUARD_SETUP=true" >> $GITHUB_ENV
          echo "WG_CONFIG_DIR=/tmp/wireguard" >> $GITHUB_ENV

          # Create CI-friendly directories
          mkdir -p /tmp/intelluxe-stack/{logs,backups,qrcodes}
          mkdir -p /tmp/wireguard
          echo "# CI WireGuard config" > /tmp/wireguard/wg0.conf

      - name: Comprehensive Infrastructure Validation
        env:
          CI: true
          GITHUB_ACTIONS: true
          ENVIRONMENT: development
          CFG_ROOT: /tmp/intelluxe-stack
          CFG_UID: 1000
          CFG_GID: 1001
          SKIP_GPU_PACKAGES: true
          CI_SKIP_DEPS: true
          CI_SKIP_SYSTEM_TESTS: true
          CI_NO_SUDO: true
          SKIP_ROOT_CHECKS: true
          SKIP_WIREGUARD_SETUP: true
        run: |
          echo "üè• Running comprehensive infrastructure validation..."

          # Set CI-friendly environment
          export WG_CONFIG_DIR="/tmp/wireguard"
          export CFG_ROOT=/tmp/intelluxe-stack

          total_infrastructure_errors=0

          # 1. Verify Dependencies Available
          echo ""
          echo "üì¶ Checking Dependencies..."
          if command -v shellcheck >/dev/null 2>&1; then
            echo "‚úÖ shellcheck available: $(shellcheck --version | head -1)"
          else
            echo "‚ö†Ô∏è  shellcheck not available - may affect some validations"
          fi

          # 2. Bootstrap Infrastructure Validation
          echo ""
          echo "üöÄ Running Bootstrap Infrastructure Validation..."
          if timeout 5m ./scripts/bootstrap.sh --validate --non-interactive --skip-docker-check --dry-run --skip-deps; then
            echo "‚úÖ Bootstrap validation passed"
          else
            echo "‚ö†Ô∏è  Bootstrap validation completed with warnings (expected in CI)"
          fi

          # 3. Shell Script Test Suite
          echo ""
          echo "üîß Running Healthcare AI Shell Script Test Suite..."
          if timeout 5m bash ./scripts/test.sh; then
            echo "‚úÖ Shell script tests passed"
          else
            echo "‚ö†Ô∏è  Shell script tests completed with some expected failures in CI"
          fi

          # 4. Comprehensive Lint Check
          echo ""
          echo "üîç Running Comprehensive Lint Validation..."

          # Check for linting tools
          if command -v shellcheck >/dev/null 2>&1 && command -v flake8 >/dev/null 2>&1; then
            if make lint; then
              echo "‚úÖ Lint validation passed"
            else
              echo "‚ùå Lint validation failed"
              ((total_infrastructure_errors++))
            fi
          else
            echo "‚ö†Ô∏è  Linting tools not fully available - skipping detailed lint check"
          fi

          # 5. Validation Summary
          echo ""
          echo "üìã Validation Summary"

          # Clean up any stale lock files
          rm -f "$HOME/.cache/bootstrap.lock" "/tmp/bootstrap-$(whoami).lock" ".bootstrap.lock" || true

          # Final infrastructure validation
          if timeout 5m ./scripts/bootstrap.sh --validate --non-interactive --skip-docker-check --dry-run --skip-deps; then
            echo "‚úÖ Final infrastructure validation passed"
          else
            echo "‚ö†Ô∏è  Final infrastructure validation completed with warnings"
          fi

          # Summary
          echo ""
          echo "üè• Infrastructure Comprehensive Summary:"
          echo "======================================="
          if [ $total_infrastructure_errors -eq 0 ]; then
            echo "‚úÖ Infrastructure comprehensive validation PASSED"
            echo "üöÄ Healthcare AI infrastructure is ready for development"
          else
            echo "‚ùå Infrastructure issues found ($total_infrastructure_errors critical errors)"
            echo "üö® Infrastructure validation requirements not met"
            exit 1
          fi

  # Comprehensive coverage generation - runs after all tests
  healthcare-coverage-report:
    runs-on: self-hosted
    needs:
      [
        setup-dependencies,
        python-syntax-validation,
        python-quality-validation,
        healthcare-security-comprehensive,
        infrastructure-comprehensive,
      ]
    if: always()
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            /tmp/ci-python-${{ github.run_id }}
          key: ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}-v8
          restore-keys: |
            ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}
            ${{ runner.os }}-python-ci-optimized-

      - name: Setup Python PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Setup CI Environment
        run: |
          echo "=== Setting up CI Environment for Coverage ==="

          # Set CI-specific environment variables
          echo "CI_NO_SUDO=true" >> $GITHUB_ENV
          echo "SKIP_ROOT_CHECKS=true" >> $GITHUB_ENV
          echo "SKIP_GPU_PACKAGES=true" >> $GITHUB_ENV
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "CFG_ROOT=/tmp/intelluxe-stack" >> $GITHUB_ENV
          echo "CFG_UID=1000" >> $GITHUB_ENV
          echo "CFG_GID=1001" >> $GITHUB_ENV
          echo "CI_SKIP_DEPS=true" >> $GITHUB_ENV
          echo "SKIP_WIREGUARD_SETUP=true" >> $GITHUB_ENV

          # Create CI-friendly directories
          mkdir -p /tmp/intelluxe-stack/{logs,backups,qrcodes}
          mkdir -p /tmp/wireguard
          echo "# CI WireGuard config" > /tmp/wireguard/wg0.conf

      - name: Generate Healthcare AI Coverage Report
        env:
          CI: true
          GITHUB_ACTIONS: true
          ENVIRONMENT: development
          CFG_ROOT: /tmp/intelluxe-stack
          CFG_UID: 1000
          CFG_GID: 1001
          CI_SKIP_DEPS: true
          CI_NO_SUDO: true
          SKIP_ROOT_CHECKS: true
          SKIP_WIREGUARD_SETUP: true
        run: |
          echo "üè• Generating comprehensive healthcare AI coverage report..."

          # Set CI-friendly environment
          export WG_CONFIG_DIR="/tmp/wireguard"
          export CFG_ROOT=/tmp/intelluxe-stack

          # Use existing shared dependencies - avoid scripts that install their own deps
          echo "‚úÖ Using cached dependencies from setup-dependencies job"

          # Run basic test suite with CI_SKIP_DEPS to prevent dependency installation
          echo "Running healthcare AI tests with dependency installation disabled..."
          timeout 5m bash ./scripts/test.sh || echo "Test suite completed with some expected failures in CI"

          # Create basic coverage summary (without kcov which requires installation)
          echo "üìä Generating basic test coverage summary..."
          mkdir -p coverage/

          # Count test files and results for basic coverage metrics
          if [ -d "test/" ]; then
            test_files=$(find test/ -name "*.bats" | wc -l)
            echo "Healthcare AI Test Coverage Summary" > coverage/summary.txt
            echo "==================================" >> coverage/summary.txt
            echo "Test files found: $test_files" >> coverage/summary.txt
            echo "Environment: CI with shared dependencies" >> coverage/summary.txt
            echo "Timestamp: $(date)" >> coverage/summary.txt
            echo "‚úÖ Basic coverage summary generated"
          else
            echo "‚ö†Ô∏è  No test directory found"
          fi

      - name: Upload Healthcare AI Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: healthcare-ai-comprehensive-coverage
          path: coverage/
          retention-days: 30
          if-no-files-found: warn

      - name: Coverage Summary
        if: always()
        run: |
          echo "üè• Healthcare AI Coverage Summary"
          echo "================================"

          if [ -d "coverage/" ]; then
            coverage_files=$(find coverage/ -type f | wc -l)
            coverage_size=$(du -sh coverage/ 2>/dev/null | cut -f1 || echo "unknown")
            echo "üìä Coverage files: $coverage_files"
            echo "üìä Coverage size: $coverage_size"

            # Check for different types of coverage reports
            if [ -f "coverage/index.html" ]; then
              echo "‚úÖ HTML coverage report available for download"
            elif [ -f "coverage/summary.txt" ]; then
              echo "‚úÖ Basic coverage summary available"
              echo "üìÑ Coverage summary contents:"
              cat coverage/summary.txt | head -10
            fi

            echo ""
            echo "Coverage report uploaded as 'healthcare-ai-comprehensive-coverage' artifact"
          else
            echo "‚ö†Ô∏è  No coverage data generated"
            echo "‚ÑπÔ∏è  This may be expected in CI environment with shared dependencies"
          fi

  # Final status check - only runs if all critical checks pass
  healthcare-compliance-summary:
    runs-on: self-hosted
    needs:
      [
        healthcare-security-comprehensive,
        infrastructure-comprehensive,
        healthcare-coverage-report,
        test-synthetic-data-generation,
      ]
    if: always()
    steps:
      - name: Healthcare Compliance Summary
        run: |
          echo "üè• Healthcare AI Compliance Summary"
          echo "=================================="

          # Check if all healthcare security checks passed
          security_status="${{ needs.healthcare-security-comprehensive.result }}"
          infrastructure_status="${{ needs.infrastructure-comprehensive.result }}"
          coverage_status="${{ needs.healthcare-coverage-report.result }}"

          echo "Healthcare Security: $security_status"
          echo "Infrastructure: $infrastructure_status"
          echo "Coverage Report: $coverage_status"

          # Determine overall compliance status
          failed_checks=0

          [[ "$security_status" != "success" && "$security_status" != "skipped" ]] && ((failed_checks++))
          [[ "$infrastructure_status" != "success" && "$infrastructure_status" != "skipped" ]] && ((failed_checks++))
          # Note: Coverage report failure doesn't fail compliance (it's supplementary)

          echo ""
          if [ $failed_checks -eq 0 ]; then
            echo "‚úÖ Healthcare compliance validation PASSED"
            echo "üè• System meets HIPAA compliance requirements"
            if [ "$coverage_status" = "success" ]; then
              echo "üìä Coverage report generated successfully"
            else
              echo "‚ö†Ô∏è  Coverage report had issues but compliance still passes"
            fi
          else
            echo "‚ùå Healthcare compliance validation FAILED ($failed_checks checks failed)"
            echo "üö® This system would NOT be HIPAA compliant if deployed"
            exit 1
          fi

  # Synthetic Healthcare Data Validation
  test-synthetic-data-generation:
    runs-on: self-hosted
    needs: setup-dependencies
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            /tmp/ci-python-${{ github.run_id }}
          key: ${{ runner.os }}-python-ci-optimized-${{ hashFiles('requirements-ci.txt') }}-v8
      - name: Test synthetic data generation
        run: |
          echo "üè• Testing synthetic healthcare data generation..."

          # 1. Validate script syntax
          if [ -f "scripts/generate_synthetic_healthcare_data.py" ]; then
            if python3 -m py_compile scripts/generate_synthetic_healthcare_data.py; then
              echo "‚úÖ Synthetic data generator syntax valid"
            else
              echo "‚ùå Synthetic data generator syntax error"
              exit 1
            fi
          else
            echo "‚ùå Synthetic data generator script not found"
            exit 1
          fi

          # 2. Test small dataset generation
          test_dir="/tmp/ci-synthetic-test"
          mkdir -p "$test_dir"

          echo "üìä Generating test dataset..."
          if timeout 2m python3 scripts/generate_synthetic_healthcare_data.py \
            --doctors 2 --patients 5 --encounters 8 --output-dir "$test_dir"; then
            echo "‚úÖ Test dataset generation successful"
          else
            echo "‚ùå Test dataset generation failed"
            exit 1
          fi

          # 3. Validate output files
          expected_files="doctors.json patients.json encounters.json lab_results.json insurance_verifications.json agent_sessions.json billing_claims.json doctor_preferences.json audit_logs.json"

          for file in $expected_files; do
            if [ -f "$test_dir/$file" ]; then
              if python3 -c "import json; json.load(open('$test_dir/$file'))" 2>/dev/null; then
                echo "‚úÖ $file: Valid JSON"
              else
                echo "‚ùå $file: Invalid JSON"
                exit 1
              fi
            else
              echo "‚ùå $file: Not generated"
              exit 1
            fi
          done

          echo "‚úÖ Synthetic data validation complete"

  # Test agent configuration loading
  test-agent-configuration:
    runs-on: self-hosted
    needs: setup-dependencies
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Test agent configuration
        run: |
          echo "Testing agent configuration loading..."
          if [ -f "config/agent_settings.yml" ]; then
            python3 -c "
          import yaml
          with open('config/agent_settings.yml') as f:
              config = yaml.safe_load(f)
              print(f'‚úÖ Agent config loaded: {len(config.get(\"agent_limits\", {}))} agents configured')
          "
          else
            echo "‚ö†Ô∏è Agent settings file not found"
          fi

# Environment variables for healthcare AI development
env:
  INTELLUXE_CI_MODE: true
  HEALTHCARE_COMPLIANCE: enabled
  PHI_PROTECTION: strict
  ENVIRONMENT: development
  CI: true
  CI_MINIMAL_DEPS: true
