name: Healthcare AI Evaluation Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level (basic, comprehensive, full)'
        required: false
        default: 'comprehensive'

env:
  PYTHON_VERSION: '3.10'
  ENVIRONMENT: 'ci'

jobs:
  phi-detection-validation:
    name: PHI Detection Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
    
    - name: Run PHI Detection Tests
      run: |
        python -m pytest tests/healthcare_evaluation/test_phi_detection.py -v
    
    - name: Validate PHI Patterns
      run: |
        python scripts/check-phi-patterns.py
    
    - name: Check for PHI in Codebase
      run: |
        # This will fail if real PHI patterns are found
        ./scripts/lint-all.sh

  healthcare-component-testing:
    name: Healthcare Component Testing
    runs-on: ubuntu-latest
    needs: phi-detection-validation
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: healthcare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
    
    - name: Run Healthcare MCP Tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/healthcare_test
      run: |
        python -m pytest tests/healthcare_evaluation/test_healthcare_mcp.py -v
    
    - name: Run RBAC Tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/healthcare_test
      run: |
        python -m pytest tests/healthcare_evaluation/test_rbac.py -v
    
    - name: Run Encryption Tests
      run: |
        python -m pytest tests/healthcare_evaluation/test_encryption.py -v

  deepeval-healthcare-testing:
    name: DeepEval Healthcare Testing
    runs-on: ubuntu-latest
    needs: healthcare-component-testing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
    
    - name: Run DeepEval Healthcare Tests
      env:
        DEEPEVAL_API_KEY: ${{ secrets.DEEPEVAL_API_KEY }}
      run: |
        python -m pytest tests/healthcare_evaluation/test_deepeval_healthcare.py -v
    
    - name: Generate Healthcare Evaluation Report
      run: |
        python scripts/generate-healthcare-report.py
    
    - name: Upload Evaluation Report
      uses: actions/upload-artifact@v3
      with:
        name: healthcare-evaluation-report
        path: reports/healthcare-evaluation-*.html

  hipaa-compliance-validation:
    name: HIPAA Compliance Validation
    runs-on: ubuntu-latest
    needs: deepeval-healthcare-testing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
    
    - name: Validate HIPAA Configuration
      run: |
        python scripts/validate-hipaa-config.py
    
    - name: Run Audit Logger Tests
      run: |
        python -m pytest tests/healthcare_evaluation/test_audit_logger.py -v
    
    - name: Validate Encryption Standards
      run: |
        python scripts/validate-encryption-standards.py
    
    - name: Generate HIPAA Compliance Report
      run: |
        python scripts/generate-hipaa-report.py
    
    - name: Upload HIPAA Report
      uses: actions/upload-artifact@v3
      with:
        name: hipaa-compliance-report
        path: reports/hipaa-compliance-*.pdf

  synthetic-data-validation:
    name: Synthetic Data Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
    
    - name: Test Synthetic Data Generation
      run: |
        python -m pytest tests/healthcare_evaluation/test_synthetic_data.py -v
    
    - name: Validate Data Quality
      run: |
        python scripts/validate-synthetic-data-quality.py
    
    - name: Check for Real PHI Leakage
      run: |
        python scripts/check-synthetic-data-phi.py

  integration-testing:
    name: Healthcare Integration Testing
    runs-on: ubuntu-latest
    needs: [hipaa-compliance-validation, synthetic-data-validation]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: healthcare_test
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
    
    - name: Run Integration Tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/healthcare_test
        REDIS_URL: redis://localhost:6379
      run: |
        python -m pytest tests/healthcare_evaluation/test_integration.py -v
    
    - name: Test End-to-End Healthcare Workflows
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/healthcare_test
        REDIS_URL: redis://localhost:6379
      run: |
        python -m pytest tests/healthcare_evaluation/test_e2e_workflows.py -v

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: integration-testing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Environment Configuration
      run: |
        ./scripts/validate-dev-environment.sh
    
    - name: Check Production Readiness
      run: |
        python scripts/check-production-readiness.py
    
    - name: Generate Deployment Report
      run: |
        python scripts/generate-deployment-report.py
    
    - name: Upload Deployment Report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-readiness-report
        path: reports/deployment-readiness-*.json
