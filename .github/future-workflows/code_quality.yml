name: Code Quality Pipeline

on:
  push:
    branches: [main, develop, "feature/*"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  linting:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pylint bandit
          pip install -r requirements-ci.txt

      - name: Run Flake8
        run: |
          flake8 --max-line-length=100 --extend-ignore=E203,W503 \
            --exclude=.git,__pycache__,venv,env,.venv,.env \
            src/ tests/ scripts/*.py

      - name: Check Black Formatting
        run: |
          black --check --diff src/ tests/ scripts/*.py

      - name: Check Import Sorting
        run: |
          isort --check-only --diff src/ tests/ scripts/*.py

      - name: Run MyPy Type Checking
        run: |
          mypy src/ --ignore-missing-imports

      - name: Run Pylint
        run: |
          pylint src/ --disable=C0114,C0115,C0116 --max-line-length=100

  security-linting:
    name: Security Linting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          pip install -r requirements-ci.txt

      - name: Run Bandit Security Linting
        run: |
          bandit -r src/ -f txt

      - name: Check Dependencies for Vulnerabilities
        run: |
          safety check

  shell-linting:
    name: Shell Script Linting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run ShellCheck
        run: |
          find scripts -name "*.sh" -exec shellcheck -x {} \;

  documentation-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install documentation tools
        run: |
          python -m pip install --upgrade pip
          pip install pydocstyle doc8
          pip install -r requirements-ci.txt

      - name: Check Docstring Style
        run: |
          pydocstyle src/ --convention=google

      - name: Validate README and Documentation
        run: |
          doc8 README.md docs/ --max-line-length=100

      - name: Check for Missing Docstrings
        run: |
          python scripts/check-missing-docstrings.py

  healthcare-specific-linting:
    name: Healthcare-Specific Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt

      - name: Run Comprehensive Linting
        run: |
          ./scripts/lint-all.sh

      - name: Check PHI Patterns
        run: |
          python scripts/check-phi-patterns.py

      - name: Validate Medical Terminology
        run: |
          python scripts/validate-medical-terminology.py

      - name: Check HIPAA Compliance Patterns
        run: |
          python scripts/check-hipaa-patterns.py

  code-complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install complexity tools
        run: |
          python -m pip install --upgrade pip
          pip install radon xenon mccabe
          pip install -r requirements-ci.txt

      - name: Run Radon Complexity Analysis
        run: |
          radon cc src/ -a -nc
          radon mi src/ -nc

      - name: Check Cyclomatic Complexity
        run: |
          xenon --max-absolute B --max-modules A --max-average A src/

      - name: Generate Complexity Report
        run: |
          radon cc src/ -j > complexity-report.json

      - name: Upload Complexity Report
        uses: actions/upload-artifact@v3
        with:
          name: complexity-report
          path: complexity-report.json

  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage pytest-cov
          pip install -r requirements-ci.txt

      - name: Run Tests with Coverage
        env:
          DATABASE_URL: postgresql://postgres:test_password@172.20.0.13:5432/test_db
        run: |
          coverage run -m pytest tests/ -v
          coverage report -m
          coverage html

      - name: Check Coverage Threshold
        run: |
          coverage report --fail-under=80

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependency tools
        run: |
          python -m pip install --upgrade pip
          pip install pipdeptree pip-audit
          pip install -r requirements-ci.txt

      - name: Generate Dependency Tree
        run: |
          pipdeptree --json > dependency-tree.json
          pipdeptree

      - name: Audit Dependencies
        run: |
          pip-audit --format=json --output=audit-report.json
          pip-audit

      - name: Check for Unused Dependencies
        run: |
          python scripts/check-unused-dependencies.py

      - name: Upload Dependency Reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-reports
          path: |
            dependency-tree.json
            audit-report.json

  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install performance tools
        run: |
          python -m pip install --upgrade pip
          pip install memory-profiler line-profiler
          pip install -r requirements-ci.txt

      - name: Run Performance Tests
        run: |
          python -m pytest tests/performance/ -v

      - name: Profile Critical Functions
        run: |
          python scripts/profile-critical-functions.py

      - name: Memory Usage Analysis
        run: |
          python scripts/analyze-memory-usage.py

  code-quality-report:
    name: Generate Code Quality Report
    runs-on: ubuntu-latest
    needs:
      [
        linting,
        security-linting,
        shell-linting,
        documentation-validation,
        healthcare-specific-linting,
        code-complexity,
        test-coverage,
        dependency-analysis,
        performance-analysis,
      ]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt

      - name: Download All Artifacts
        uses: actions/download-artifact@v3

      - name: Generate Comprehensive Quality Report
        run: |
          python scripts/generate-quality-report.py

      - name: Upload Quality Report
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-report
          path: reports/code-quality-*.html

      - name: Comment PR with Quality Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('reports/quality-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  auto-fix:
    name: Auto-fix Code Quality Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort autopep8

      - name: Auto-fix Formatting
        run: |
          black src/ tests/ scripts/*.py
          isort src/ tests/ scripts/*.py
          autopep8 --in-place --aggressive --aggressive src/ tests/ scripts/*.py

      - name: Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "style: auto-fix code formatting issues"
          git push
