{
  "id": "cfd104747545438280664cd5f2705233",
  "name": "Healthcare Configuration Manager",
  "meta": {
    "description": "Healthcare Configuration Manager",
    "manifest": {},
    "type": "action"
  },
  "content": "\"\"\"\nHealthcare Configuration Manager for Open WebUI (Standalone Version)\nProvides a comprehensive interface for managing healthcare system configurations\n\"\"\"\n\nimport logging\nimport os\nimport yaml\nfrom datetime import datetime\nfrom typing import Any, Dict, Optional\nfrom pathlib import Path\n\nfrom pydantic import BaseModel, Field\n\n\n\nimport os\nfrom typing import Dict, Any\n\n# Fallback configuration when external config files aren't available\nclass FallbackConfig:\n    \"\"\"Fallback configuration using environment variables.\"\"\"\n    \n    def __init__(self):\n        # Transcription defaults\n        self.websocket_base_url = os.getenv('HEALTHCARE_WEBSOCKET_URL', 'ws://localhost:8000')\n        self.rest_api_url = os.getenv('HEALTHCARE_REST_URL', 'http://localhost:8000')\n        self.timeout_seconds = int(os.getenv('TRANSCRIPTION_TIMEOUT', '300'))\n        self.chunk_interval = int(os.getenv('CHUNK_INTERVAL', '2'))\n        self.confidence_threshold = float(os.getenv('CONFIDENCE_THRESHOLD', '0.85'))\n        \n        # UI defaults\n        self.developer_mode = os.getenv('DEVELOPER_MODE', 'true').lower() == 'true'\n        self.debug_logging = os.getenv('DEBUG_LOGGING', 'false').lower() == 'true'\n        self.mock_transcription = os.getenv('MOCK_TRANSCRIPTION', 'false').lower() == 'true'\n        self.show_disclaimer = os.getenv('SHOW_MEDICAL_DISCLAIMER', 'true').lower() == 'true'\n        self.phi_protection = os.getenv('PHI_PROTECTION_ENABLED', 'true').lower() == 'true'\n\n# Create fallback configuration instances\ntry:\n    # Try to import original configs if available\n    from config.transcription_config_loader import TRANSCRIPTION_CONFIG\n    from config.ui_config_loader import UI_CONFIG\nexcept ImportError:\n    # Use fallback configuration\n    fallback = FallbackConfig()\n    \n    # Mock config objects to match expected structure\n    class MockTranscriptionConfig:\n        def __init__(self):\n            self.websocket = type('obj', (object,), {'base_url': fallback.websocket_base_url})\n            self.session = type('obj', (object,), {\n                'default_timeout_seconds': fallback.timeout_seconds,\n                'audio_chunk_interval_seconds': fallback.chunk_interval\n            })\n            self.quality = type('obj', (object,), {\n                'default_confidence_threshold': fallback.confidence_threshold,\n                'high_confidence_threshold': fallback.confidence_threshold + 0.05\n            })\n    \n    class MockUIConfig:\n        def __init__(self):\n            self.api_integration = type('obj', (object,), {\n                'websocket_url': fallback.websocket_base_url,\n                'rest_api_url': fallback.rest_api_url\n            })\n            self.developer = type('obj', (object,), {\n                'mode_enabled': fallback.developer_mode,\n                'debug_logging': fallback.debug_logging,\n                'mock_transcription': fallback.mock_transcription,\n                'test_users': [\"admin\", \"justin\", \"jeff\"],\n                'default_test_user': \"admin\"\n            })\n            self.compliance = type('obj', (object,), {\n                'show_medical_disclaimer': fallback.show_disclaimer,\n                'phi_protection_enabled': fallback.phi_protection,\n                'disclaimer_text': \"This system provides administrative support only, not medical advice.\"\n            })\n            self.session = type('obj', (object,), {\n                'timeout_seconds': fallback.timeout_seconds,\n                'chunk_interval_seconds': fallback.chunk_interval,\n                'auto_soap_generation': True\n            })\n            self.user_experience = type('obj', (object,), {\n                'show_real_time_transcription': True\n            })\n    \n    TRANSCRIPTION_CONFIG = MockTranscriptionConfig()\n    UI_CONFIG = MockUIConfig()\n\n\nclass Action:\n    \"\"\"\n    Healthcare Configuration Manager\n\n    Provides a comprehensive interface for managing healthcare system configurations\n    including transcription settings, UI preferences, security settings, and more.\n    This standalone version works without external dependencies.\n    \"\"\"\n\n    class Valves(BaseModel):\n        \"\"\"Configuration sections for healthcare system management\"\"\"\n\n        # === Access Control ===\n        ADMIN_ONLY_MODE: bool = Field(\n            default=True,\n            description=\"üîí Restrict configuration access to administrators only\",\n        )\n        ADMIN_USERS: list[str] = Field(\n            default=[\"admin\", \"justin\", \"jeff\"],\n            description=\"üë• List of users with configuration management access\",\n        )\n\n        # === Transcription Service Configuration ===\n        TRANSCRIPTION_WEBSOCKET_URL: str = Field(\n            default=os.getenv('HEALTHCARE_WEBSOCKET_URL', 'ws://localhost:8000'),\n            description=\"üåê WebSocket URL for transcription service\",\n        )\n        TRANSCRIPTION_TIMEOUT_SECONDS: int = Field(\n            default=int(os.getenv('TRANSCRIPTION_TIMEOUT', '300')),\n            ge=60,\n            le=3600,\n            description=\"‚è∞ Maximum transcription session duration (60-3600 seconds)\",\n        )\n        TRANSCRIPTION_CHUNK_INTERVAL: int = Field(\n            default=int(os.getenv('CHUNK_INTERVAL', '2')),\n            ge=1,\n            le=10,\n            description=\"üéµ Audio chunk processing interval (1-10 seconds)\",\n        )\n        DEFAULT_CONFIDENCE_THRESHOLD: float = Field(\n            default=float(os.getenv('CONFIDENCE_THRESHOLD', '0.85')),\n            ge=0.1,\n            le=1.0,\n            description=\"üéØ Default confidence threshold for transcription (0.1-1.0)\",\n        )\n        HIGH_CONFIDENCE_THRESHOLD: float = Field(\n            default=float(os.getenv('HIGH_CONFIDENCE_THRESHOLD', '0.92')),\n            ge=0.1,\n            le=1.0,\n            description=\"‚≠ê High confidence threshold for medical terms (0.1-1.0)\",\n        )\n\n        # === UI and Experience Configuration ===\n        UI_WEBSOCKET_URL: str = Field(\n            default=os.getenv('UI_WEBSOCKET_URL', 'ws://localhost:8000'),\n            description=\"üåê UI WebSocket connection URL\",\n        )\n        UI_REST_API_URL: str = Field(\n            default=os.getenv('UI_REST_API_URL', 'http://localhost:8000'),\n            description=\"üîó UI REST API connection URL\",\n        )\n        DEVELOPER_MODE_ENABLED: bool = Field(\n            default=os.getenv('DEVELOPER_MODE', 'true').lower() == 'true',\n            description=\"üõ†Ô∏è Enable developer mode with additional features\",\n        )\n        DEBUG_LOGGING_ENABLED: bool = Field(\n            default=os.getenv('DEBUG_LOGGING', 'false').lower() == 'true',\n            description=\"üìù Enable detailed debug logging\",\n        )\n        MOCK_TRANSCRIPTION_MODE: bool = Field(\n            default=os.getenv('MOCK_TRANSCRIPTION', 'false').lower() == 'true',\n            description=\"üé≠ Use mock transcription for testing\",\n        )\n\n        # === Medical Compliance ===\n        SHOW_MEDICAL_DISCLAIMER: bool = Field(\n            default=os.getenv('SHOW_MEDICAL_DISCLAIMER', 'true').lower() == 'true',\n            description=\"‚ö†Ô∏è Display medical disclaimer to users\",\n        )\n        PHI_PROTECTION_ENABLED: bool = Field(\n            default=os.getenv('PHI_PROTECTION_ENABLED', 'true').lower() == 'true',\n            description=\"üîí Enable PHI (Protected Health Information) protection\",\n        )\n        HEALTHCARE_COMPLIANCE_MODE: bool = Field(\n            default=os.getenv('HEALTHCARE_COMPLIANCE_MODE', 'true').lower() == 'true',\n            description=\"‚öñÔ∏è Enable strict healthcare compliance mode\",\n        )\n        AUDIT_LOGGING_ENABLED: bool = Field(\n            default=os.getenv('AUDIT_LOGGING_ENABLED', 'true').lower() == 'true',\n            description=\"üìã Enable comprehensive audit logging\",\n        )\n        MEDICAL_DISCLAIMER_TEXT: str = Field(\n            default=os.getenv('MEDICAL_DISCLAIMER_TEXT', \n                            \"This system provides administrative support only, not medical advice. \"\n                            \"Always consult healthcare professionals for medical decisions.\"),\n            description=\"üìù Custom medical disclaimer text\",\n        )\n\n        # === Performance & Limits ===\n        MAX_CONCURRENT_SESSIONS: int = Field(\n            default=int(os.getenv('MAX_CONCURRENT_SESSIONS', '10')),\n            ge=1,\n            le=50,\n            description=\"üë• Maximum concurrent transcription sessions per user (1-50)\",\n        )\n        CONNECTION_RETRY_ATTEMPTS: int = Field(\n            default=int(os.getenv('CONNECTION_RETRY_ATTEMPTS', '3')),\n            ge=1,\n            le=10,\n            description=\"üîÑ Connection retry attempts (1-10)\",\n        )\n        RETRY_DELAY_SECONDS: int = Field(\n            default=int(os.getenv('RETRY_DELAY_SECONDS', '5')),\n            ge=1,\n            le=30,\n            description=\"‚è±Ô∏è Delay between retry attempts (1-30 seconds)\",\n        )\n\n        # === Features ===\n        AUTO_SOAP_GENERATION: bool = Field(\n            default=os.getenv('AUTO_SOAP_GENERATION', 'true').lower() == 'true',\n            description=\"üìã Automatically generate SOAP notes from transcriptions\",\n        )\n        REAL_TIME_TRANSCRIPTION_DISPLAY: bool = Field(\n            default=os.getenv('REAL_TIME_TRANSCRIPTION_DISPLAY', 'true').lower() == 'true',\n            description=\"üîÑ Show transcription results in real-time\",\n        )\n        STATUS_UPDATES_ENABLED: bool = Field(\n            default=os.getenv('STATUS_UPDATES_ENABLED', 'true').lower() == 'true',\n            description=\"üìä Show status updates during transcription\",\n        )\n\n        # === Configuration File Paths ===\n        CONFIG_BASE_PATH: str = Field(\n            default=os.getenv('HEALTHCARE_CONFIG_PATH', '/home/intelluxe/services/user/healthcare-api/config'),\n            description=\"üìÅ Base path for healthcare configuration files\",\n        )\n\n    def __init__(self):\n        self.valves = self.Valves()\n        self._setup_logging()\n\n    def _setup_logging(self):\n        \"\"\"Setup logging configuration.\"\"\"\n        log_level = logging.DEBUG if self.valves.DEBUG_LOGGING_ENABLED else logging.INFO\n        logging.basicConfig(\n            level=log_level,\n            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n        )\n        self.logger = logging.getLogger(__name__)\n\n    def _check_admin_access(self, user_id: str = None) -> bool:\n        \"\"\"Check if user has admin access.\"\"\"\n        if not self.valves.ADMIN_ONLY_MODE:\n            return True\n        \n        # In Open WebUI, user detection might be limited\n        # Default to allowing access if user can't be determined\n        if not user_id:\n            self.logger.warning(\"User ID not available, defaulting to admin access\")\n            return True\n            \n        return user_id in self.valves.ADMIN_USERS\n\n    def _get_configuration_summary(self) -> Dict[str, Any]:\n        \"\"\"Generate current configuration summary.\"\"\"\n        return {\n            \"transcription\": {\n                \"websocket_url\": self.valves.TRANSCRIPTION_WEBSOCKET_URL,\n                \"timeout_seconds\": self.valves.TRANSCRIPTION_TIMEOUT_SECONDS,\n                \"chunk_interval\": self.valves.TRANSCRIPTION_CHUNK_INTERVAL,\n                \"confidence_threshold\": self.valves.DEFAULT_CONFIDENCE_THRESHOLD,\n                \"high_confidence_threshold\": self.valves.HIGH_CONFIDENCE_THRESHOLD,\n            },\n            \"ui_integration\": {\n                \"websocket_url\": self.valves.UI_WEBSOCKET_URL,\n                \"rest_api_url\": self.valves.UI_REST_API_URL,\n                \"developer_mode\": self.valves.DEVELOPER_MODE_ENABLED,\n                \"mock_transcription\": self.valves.MOCK_TRANSCRIPTION_MODE,\n            },\n            \"compliance\": {\n                \"show_disclaimer\": self.valves.SHOW_MEDICAL_DISCLAIMER,\n                \"phi_protection\": self.valves.PHI_PROTECTION_ENABLED,\n                \"compliance_mode\": self.valves.HEALTHCARE_COMPLIANCE_MODE,\n                \"audit_logging\": self.valves.AUDIT_LOGGING_ENABLED,\n            },\n            \"performance\": {\n                \"max_concurrent_sessions\": self.valves.MAX_CONCURRENT_SESSIONS,\n                \"retry_attempts\": self.valves.CONNECTION_RETRY_ATTEMPTS,\n                \"retry_delay\": self.valves.RETRY_DELAY_SECONDS,\n            },\n            \"features\": {\n                \"auto_soap_generation\": self.valves.AUTO_SOAP_GENERATION,\n                \"real_time_display\": self.valves.REAL_TIME_TRANSCRIPTION_DISPLAY,\n                \"status_updates\": self.valves.STATUS_UPDATES_ENABLED,\n            }\n        }\n\n    def _save_configuration_to_yaml(self, config_data: Dict[str, Any]) -> bool:\n        \"\"\"Attempt to save configuration to YAML files if accessible.\"\"\"\n        try:\n            config_base = Path(self.valves.CONFIG_BASE_PATH)\n            \n            # Try to save transcription config\n            transcription_config_path = config_base / \"transcription_config.yml\"\n            if transcription_config_path.parent.exists():\n                transcription_config = {\n                    \"websocket\": {\n                        \"base_url\": config_data[\"transcription\"][\"websocket_url\"],\n                        \"connection_timeout_seconds\": 30,\n                    },\n                    \"session\": {\n                        \"default_timeout_seconds\": config_data[\"transcription\"][\"timeout_seconds\"],\n                        \"audio_chunk_interval_seconds\": config_data[\"transcription\"][\"chunk_interval\"],\n                        \"max_concurrent_sessions\": config_data[\"performance\"][\"max_concurrent_sessions\"],\n                    },\n                    \"quality\": {\n                        \"default_confidence_threshold\": config_data[\"transcription\"][\"confidence_threshold\"],\n                        \"high_confidence_threshold\": config_data[\"transcription\"][\"high_confidence_threshold\"],\n                    }\n                }\n                \n                with open(transcription_config_path, 'w') as f:\n                    yaml.dump(transcription_config, f, default_flow_style=False)\n                \n                self.logger.info(f\"Saved transcription config to {transcription_config_path}\")\n            \n            # Try to save UI config\n            ui_config_path = config_base / \"ui_config.yml\"\n            if ui_config_path.parent.exists():\n                ui_config = {\n                    \"api_integration\": {\n                        \"websocket_url\": config_data[\"ui_integration\"][\"websocket_url\"],\n                        \"rest_api_url\": config_data[\"ui_integration\"][\"rest_api_url\"],\n                    },\n                    \"developer\": {\n                        \"mode_enabled\": config_data[\"ui_integration\"][\"developer_mode\"],\n                        \"debug_logging\": self.valves.DEBUG_LOGGING_ENABLED,\n                        \"mock_transcription\": config_data[\"ui_integration\"][\"mock_transcription\"],\n                        \"test_users\": self.valves.ADMIN_USERS,\n                        \"default_test_user\": self.valves.ADMIN_USERS[0] if self.valves.ADMIN_USERS else \"admin\",\n                    },\n                    \"compliance\": {\n                        \"show_medical_disclaimer\": config_data[\"compliance\"][\"show_disclaimer\"],\n                        \"phi_protection_enabled\": config_data[\"compliance\"][\"phi_protection\"],\n                        \"healthcare_compliance_mode\": config_data[\"compliance\"][\"compliance_mode\"],\n                        \"disclaimer_text\": self.valves.MEDICAL_DISCLAIMER_TEXT,\n                    }\n                }\n                \n                with open(ui_config_path, 'w') as f:\n                    yaml.dump(ui_config, f, default_flow_style=False)\n                \n                self.logger.info(f\"Saved UI config to {ui_config_path}\")\n                \n            return True\n            \n        except Exception as e:\n            self.logger.error(f\"Failed to save configuration to YAML: {e}\")\n            return False\n\n    async def action(\n        self,\n        body: dict,\n        __user__: Optional[dict] = None,\n        __event_emitter__=None,\n    ) -> Optional[dict]:\n        \"\"\"\n        Main action handler for configuration management.\n        \n        Args:\n            body: The request body from Open WebUI\n            __user__: User information (if available)\n            __event_emitter__: Event emitter for real-time updates\n        \"\"\"\n        try:\n            user_id = __user__.get(\"email\", \"unknown\") if __user__ else \"unknown\"\n            \n            # Check admin access\n            if not self._check_admin_access(user_id):\n                return {\n                    \"error\": \"‚ùå Access denied. Administrator privileges required for configuration management.\",\n                    \"user_id\": user_id,\n                    \"admin_users\": self.valves.ADMIN_USERS\n                }\n            \n            # Get current configuration\n            current_config = self._get_configuration_summary()\n            \n            # Attempt to save configuration to files\n            save_success = self._save_configuration_to_yaml(current_config)\n            \n            # Generate response\n            response = {\n                \"title\": \"‚öôÔ∏è Healthcare Configuration Manager\",\n                \"user\": user_id,\n                \"timestamp\": datetime.now().isoformat(),\n                \"config_saved_to_files\": save_success,\n                \"current_configuration\": current_config,\n                \"instructions\": {\n                    \"modify_settings\": \"Update settings through the function's Valves in Open WebUI settings\",\n                    \"save_changes\": \"Changes are automatically applied when you modify valve values\",\n                    \"yaml_persistence\": \"Configuration files will be updated if accessible\" if save_success \n                                       else \"YAML files not accessible - using environment variables only\",\n                    \"testing\": {\n                        \"mock_mode\": \"Enable MOCK_TRANSCRIPTION_MODE for testing without real audio\",\n                        \"developer_mode\": \"Enable DEVELOPER_MODE_ENABLED for additional features\",\n                        \"debug_logging\": \"Enable DEBUG_LOGGING_ENABLED for detailed logs\"\n                    }\n                },\n                \"environment_variables\": {\n                    \"note\": \"You can also configure these settings using environment variables:\",\n                    \"variables\": {\n                        \"HEALTHCARE_WEBSOCKET_URL\": \"WebSocket URL for transcription service\",\n                        \"TRANSCRIPTION_TIMEOUT\": \"Session timeout in seconds\",\n                        \"DEVELOPER_MODE\": \"Enable developer features (true/false)\",\n                        \"PHI_PROTECTION_ENABLED\": \"Enable PHI protection (true/false)\",\n                        \"MAX_CONCURRENT_SESSIONS\": \"Maximum concurrent sessions per user\"\n                    }\n                }\n            }\n            \n            if __event_emitter__:\n                await __event_emitter__({\n                    \"type\": \"status\",\n                    \"data\": {\"description\": \"Configuration loaded successfully\"}\n                })\n            \n            return response\n            \n        except Exception as e:\n            error_msg = f\"Configuration management error: {str(e)}\"\n            self.logger.error(error_msg)\n            \n            if __event_emitter__:\n                await __event_emitter__({\n                    \"type\": \"status\",\n                    \"data\": {\"description\": f\"Error: {error_msg}\"}\n                })\n            \n            return {\n                \"error\": error_msg,\n                \"timestamp\": datetime.now().isoformat()\n            }"
}