justin@Intelluxe-demo:/home/intelluxe$ make test
ðŸ§ª  Running Bats tests
Running tests without coverage (kcov not available)...
clinic-bootstrap.bats
 âœ“ ensure_directories creates WireGuard dirs with ownership
 âœ“ logs directory and log file path set correctly
 âœ“ enable_config_web_ui invoked when not dry run
 âœ“ enable_config_web_ui skipped when dry run
 âœ“ get_server_ip parses IP from ip route
 âœ“ get_server_ip falls back when ip route fails
 âœ“ --reset-wg-keys updates key file and client configs
 âœ“ save_config persists VPN subnet settings
 âœ“ save_config persists Docker network and DNS settings
 âœ“ saved user service ports override defaults
 âœ“ default user service port preserved when not in config
 âœ“ stop_service uses docker stop when container exists
 âœ“ stop_service uses systemctl stop for non-container
 âœ“ stop_service wireguard stops interface and container
 âœ“ service image override respected
 âœ“ service image override respected for traefik
 - --stop-service flag triggers stop_service and exits (skipped: argument parsing snippet fails on this platform)
clinic-diagnostics.bats
 âœ“ unknown argument prints usage and exits 1
 âœ“ DNS_IP defaults to ADGUARD_CONTAINER_IP from config
 âœ“ DNS_IP falls back to built-in default when config missing
 âœ“ DNS_FALLBACK uses value from config
 âœ“ DNS_FALLBACK defaults when not in config
clinic-lib.bats
 âœ“ is_ci_or_virtual_env returns 1 when no env vars set
 âœ“ is_ci_or_virtual_env succeeds with CODEX_ENV_PYTHON_VERSION
 âœ“ is_ci_or_virtual_env succeeds with CODEX_PROXY_CERT
 âœ“ is_ci_or_virtual_env succeeds with CI=true
 âœ“ is_ci_or_virtual_env fails with CI=false
 âœ“ is_ci_or_virtual_env succeeds with VIRTUAL_ENV
 âœ“ set_ownership uses default CFG_UID/GID
 âœ“ set_ownership uses custom CFG_UID/GID
 âœ“ check_docker_socket uses DOCKER_SOCKET override
 âœ“ DOCKER_SOCKET strips unix prefix
 âœ“ LOG_DIR defaults using builtin CFG_ROOT when both unset
 âœ“ LOG_DIR defaults to custom CFG_ROOT when LOG_DIR unset
 âœ“ LOG_DIR keeps value when CFG_ROOT unset
 âœ“ LOG_DIR keeps value when both variables set
clinic-teardown.bats
 âœ“ custom DOCKER_NETWORK_NAME influences network cleanup
config-management.bats
 âœ“ parse_service_config handles all configuration keys
 âœ“ get_service_config_value extracts individual values correctly
 âœ“ get_service_config_value handles missing files and keys
 âœ“ get_service_config_value expands environment variables
 âœ“ get_service_config_value handles comments and whitespace
config-web-ui.bats
 âœ“ config-web-ui.service uses EnvironmentFile
diagnostic-pusher.bats
 âœ“ INFLUX_MOCK branch sets 204 response
 âœ“ exits when CFG_ROOT unset
duckdns-service.bats
 âœ“ duckdns-update service expands CFG_ROOT
filesystem-security.bats
 âœ“ check_secret_perms validates secure file permissions
 âœ“ check_secret_perms handles missing files
 âœ“ set_ownership applies correct ownership
 âœ“ set_ownership skips when UID/GID not set
 âœ“ validate_uuid function validates UUIDs
 âœ“ check_docker_socket validates socket permissions
 âœ“ check_docker_socket handles secure socket
 âœ“ rotate_log_if_needed rotates large log files
final-service-agnostic-validation.bats
 âœ“ setup_service_env_vars function exists and works
 âœ“ bootstrap script is service-agnostic: no hardcoded service references
 âœ“ generic environment variable processing works for any service
 âœ“ service discovery works with unified directory structure
 âœ“ no core/user service distinction exists
 âœ“ system handles arbitrary service configurations
port-validation.bats
 âœ“ check_port_in_use detects TCP ports correctly
 âœ“ check_port_in_use detects UDP ports correctly
 âœ“ check_port_in_use defaults to TCP
 âœ“ show_port_usage displays port information
 âœ“ show_port_usage handles unused ports
 âœ“ port validation with service configuration
resource-pusher.bats
 âœ“ --help prints usage and exits 0
 âœ“ unknown argument exits 0
 âœ“ missing required argument exits 0
 âœ“ valid invocation exits 0
service-agnostic-demo.bats
 âœ“ DEMO: Add MongoDB without any code changes
 âœ“ DEMO: Add custom proprietary application
 âœ“ DEMO: Add microservice fleet
 âœ“ DEMO: Verify no service-specific code remains
 âœ“ DEMO: System handles any Docker configuration
service-agnostic-integrity.bats
 âœ“ setup_service_env_vars function exists and is callable
 âœ“ setup_service_env_vars processes ADVERTISE_IP for local mode
 âœ“ setup_service_env_vars processes ADVERTISE_IP for ddns mode
 âœ“ setup_service_env_vars processes HOSTNAME for local mode
 âœ“ setup_service_env_vars processes HOSTNAME for ddns mode
 âœ“ setup_service_env_vars processes ALLOWED_NETWORKS generically
 âœ“ setup_service_env_vars processes multiple environment variables
 âœ“ setup_service_env_vars handles regular environment variables
 âœ“ setup_service_env_vars gracefully handles missing config file
 âœ“ setup_service_env_vars gracefully handles missing env section
 âœ“ bootstrap script only looks in services/user directory
 âœ“ service discovery works with any service configuration
 âœ“ no hardcoded service names remain in bootstrap script
 âœ“ service restriction logic is purely port-based
 âœ“ works with completely custom service configurations
 âœ“ environment variable expansion works in generic setup
 âœ“ service-agnostic system handles edge cases
service-management.bats
 âœ“ stop_service handles container services
 âœ“ stop_service handles non-container services via systemctl
 âœ“ stop_service handles wireguard specially
 âœ“ stop_service handles nonexistent services gracefully
 âœ“ show_ports displays port configuration
 âœ“ reset_ports restores default port configuration
 âœ“ auto_install_deps identifies missing dependencies
setup-environment.bats
 âœ“ detect_os sets package manager for Ubuntu
 âœ“ build_dependency_list includes distro specific packages
 âœ“ install_python_deps uses uv for package installation
 âœ“ install_python_deps installs healthcare AI packages
 âœ“ setup_firewall applies expected ufw rules for Intelluxe
 âœ“ setup_firewall exits early when ip_forward unwritable
 âœ“ install_system_deps reports success for all packages
 âœ“ install_system_deps warns on failed packages
 âœ“ install_system_deps handles empty dependency list
 âœ“ retry_with_backoff retries until success
 âœ“ retry_with_backoff fails after max attempts
 âœ“ verify_installation succeeds
 âœ“ verify_installation fails
 âœ“ Health check succeeds when all tools exist
 âœ“ Health check fails when a tool is missing
 âœ— CLI --health-check exits successfully
   (in test file test/setup-environment.bats, line 300)
     `[ "$status" -eq 0 ]' failed
 âœ“ CLI --health-check exits with failure
 âœ“ CLI --health-check fails when compose support missing
simplified-service-config.bats
 âœ— service configs can be discovered dynamically
   (in test file test/simplified-service-config.bats, line 25)
     `[[ $service_count -gt 0 ]]' failed
 âœ— service configs contain required fields
   (in test file test/simplified-service-config.bats, line 47)
     `[[ $configs_checked -gt 0 ]]' failed
 âœ— environment variable setup is service-agnostic
   (from function `source' in file scripts/clinic-bootstrap.sh, line 190,
    in test file test/simplified-service-config.bats, line 52)
     `source scripts/clinic-bootstrap.sh' failed
   scripts/clinic-bootstrap.sh: line 190: /home/justin/.cache/clinic-bootstrap.lock: Permission denied
 âœ“ no hardcoded service logic remains
systemd-summary.bats
 âœ“ creates log directory under CFG_ROOT
 âœ“ overriding CFG_ROOT uses new log path
systemd-verify.bats
 âœ“ LOG_DIR uses built-in CFG_ROOT
 âœ“ LOG_DIR honors custom CFG_ROOT
 âœ“ invokes systemd-analyze when present
 âœ“ exports JSON with --export-json
test_container_runner_generic.bats
 âœ“ ensure_container_running finds service config file
 âœ“ ensure_container_running handles missing service config
 âœ“ parse_service_config extracts all values
 âœ“ get_service_config_value works with various keys
 âœ“ get_service_config_value handles missing values
 âœ“ service config supports complex values
 âœ“ service config handles comments and empty lines gracefully
 âœ“ service config supports environment variable expansion
test_service_discovery_generic.bats
 âœ“ service discovery finds correct number of valid services
 âœ“ service discovery populates arrays correctly
 âœ“ service discovery skips services without image
 âœ“ service discovery finds both core and user services
 âœ“ get_service_config_value extracts values correctly
 âœ“ get_service_config_value handles multi-value configurations
 âœ“ get_service_config_value returns default for missing values
 âœ“ service discovery handles environment variable expansion
 âœ“ parse_service_config extracts all key-value pairs
 âœ“ service discovery works with empty directories
 âœ“ service configuration handles comments and blank lines
 âœ“ reset_ports function restores default values
universal-service-runner.bats
 âœ“ parse_service_config should parse Redis configuration correctly
 âœ“ build_docker_command should generate correct Docker command
 âœ“ parse_service_config should handle missing config file
 âœ“ build_docker_command should handle minimal configuration
 âœ“ universal system should handle any Docker option via mapping
 âœ“ universal system should handle unknown config options gracefully
validate-ci.bats
 âœ“ CI validate target skips Docker checks when Docker unavailable
 âœ— --skip-docker-check flag bypasses Docker checks
   (in test file test/validate-ci.bats, line 31)
     `[ "$status" -eq 0 ]' failed
 âœ— --skip-docker-check works for validate command
   (in test file test/validate-ci.bats, line 51)
     `[ "$status" -eq 110 ]' failed
validate-config.bats
 âœ“ validate_config fails on malformed compose file

157 tests, 6 failures, 1 skipped

Tests completed or timed out
.............................................                                                                                                                                                        [100%]
45 passed in 0.35s
justin@Intelluxe-demo:/home/intelluxe$ 