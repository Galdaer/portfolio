âœ“ environment variable expansion works in generic setup
 âœ“ service-agnostic system handles edge cases
setup-environment.bats
 âœ“ detect_os sets package manager for Ubuntu
 âœ“ build_dependency_list includes distro specific packages
 âœ“ install_python_deps uses uv for package installation
 âœ— install_python_deps installs healthcare AI packages
   (from function `trap_error' in file scripts/lib.sh, line 371,
    in test file test/setup-environment.bats, line 107)
     `[[ "$uv_calls" == *"fastapi"* ]]' failed
   [INFO] Installing Python dependencies with uv
   [INFO] Installing Python system packages: python3 python3-dev python3-venv libyaml-dev build-essential
   [OK] uv already present
   [INFO] Installing essential system Python packages with uv
   [OK] Essential Python dependencies installed system-wide
   [INFO] ðŸ’¡ For AI/ML development, use virtual environments with requirements.in
   [OK] Essential Python dependencies working
   [FAIL] Script failed at line 107 (exit code 1)
 âœ“ setup_firewall applies expected ufw rules for Intelluxe
 âœ“ setup_firewall exits early when ip_forward unwritable
 âœ“ install_system_deps reports success for all packages
 âœ“ install_system_deps warns on failed packages
 âœ“ install_system_deps handles empty dependency list
 âœ“ retry_with_backoff retries until success
 âœ“ retry_with_backoff fails after max attempts
 âœ“ verify_installation succeeds
 âœ“ verify_installation fails
 âœ“ Health check succeeds when all tools exist
 âœ“ Health check fails when a tool is missing
 âœ“ CLI --health-check exits successfully
 âœ“ CLI --health-check exits with failure
 âœ“ CLI --health-check fails when compose support missing
systemd-summary.bats
 âœ“ creates log directory under CFG_ROOT
 âœ“ overriding CFG_ROOT uses new log path
systemd-verify.bats
 âœ“ LOG_DIR uses built-in CFG_ROOT
 âœ“ LOG_DIR honors custom CFG_ROOT
 âœ“ invokes systemd-analyze when present
 âœ“ exports JSON with --export-json
teardown.bats
 âœ“ custom DOCKER_NETWORK_NAME influences network cleanup
test_container_runner_generic.bats
 âœ“ ensure_container_running finds service config file
 âœ“ ensure_container_running handles missing service config
 âœ“ parse_service_config extracts all values
 âœ“ get_service_config_value works with various keys
 âœ“ get_service_config_value handles missing values
 âœ“ service config supports complex values
 âœ“ service config handles comments and empty lines gracefully
 âœ“ service config supports environment variable expansion
test_service_discovery_generic.bats
 âœ“ service discovery finds correct number of valid services
 âœ“ service discovery populates arrays correctly
 âœ“ service discovery skips services without image
 âœ“ service discovery finds both core and user services
 âœ“ get_service_config_value extracts values correctly
 âœ“ get_service_config_value handles multi-value configurations
 âœ“ get_service_config_value returns default for missing values
 âœ“ service discovery handles environment variable expansion
 âœ“ parse_service_config extracts all key-value pairs
 âœ“ service discovery works with empty directories
 âœ“ service configuration handles comments and blank lines
 âœ“ reset_ports function restores default values
universal-service-runner.bats
 âœ“ parse_service_config should parse Redis configuration correctly
 âœ“ build_docker_command should generate correct Docker command
 âœ“ parse_service_config should handle missing config file
 âœ“ build_docker_command should handle minimal configuration
 âœ“ universal system should handle any Docker option via mapping
 âœ“ universal system should handle unknown config options gracefully
validate-ci.bats
 âœ“ CI validate target skips Docker checks when Docker unavailable
 âœ“ --skip-docker-check flag bypasses Docker checks
 âœ“ --skip-docker-check works for validate command
validate-config.bats
 âœ“ validate_config fails on malformed compose file

141 tests, 1 failure, 1 skipped

Tests completed or timed out
.............................................FFFFFFF.                                                                                                                                       [100%]
============================================================================================ FAILURES =============================================================================================
_______________________________________________________________________________________ test_config_loading _______________________________________________________________________________________

    def test_config_loading():
        """Test that configuration loads correctly"""
>       from config.app import config
E       ModuleNotFoundError: No module named 'config'

test/python/test_foundation.py:15: ModuleNotFoundError
_______________________________________________________________________________ test_memory_manager_initialization ________________________________________________________________________________

    @pytest.mark.asyncio
    async def test_memory_manager_initialization():
        """Test memory manager can be initialized"""
>       from core.memory import MemoryManager
E       ModuleNotFoundError: No module named 'core'

test/python/test_foundation.py:26: ModuleNotFoundError
_______________________________________________________________________________ test_model_registry_initialization ________________________________________________________________________________

    @pytest.mark.asyncio
    async def test_model_registry_initialization():
        """Test model registry can be initialized"""
>       from core.models import ModelRegistry
E       ModuleNotFoundError: No module named 'core'

test/python/test_foundation.py:45: ModuleNotFoundError
________________________________________________________________________________ test_tool_registry_initialization ________________________________________________________________________________

    @pytest.mark.asyncio
    async def test_tool_registry_initialization():
        """Test tool registry can be initialized"""
>       from core.tools import ToolRegistry
E       ModuleNotFoundError: No module named 'core'

test/python/test_foundation.py:64: ModuleNotFoundError
________________________________________________________________________________ test_base_agent_safety_boundaries ________________________________________________________________________________

    @pytest.mark.asyncio
    async def test_base_agent_safety_boundaries():
        """Test that safety boundaries are enforced"""
>       from agents import BaseHealthcareAgent
E       ModuleNotFoundError: No module named 'agents'

test/python/test_foundation.py:84: ModuleNotFoundError
___________________________________________________________________________________ test_agent_templates_exist ____________________________________________________________________________________

    def test_agent_templates_exist():
        """Test that agent templates are available"""
>       from agents import document_agent, research_agent
E       ModuleNotFoundError: No module named 'agents'

test/python/test_foundation.py:109: ModuleNotFoundError
_________________________________________________________________________________ test_phase0_directory_structure _________________________________________________________________________________

    def test_phase0_directory_structure():
        """Test that Phase 0 directories exist"""
        import os
    
        base_dirs = [
            "agents", "core", "data", "infrastructure",
            "notebooks", "config", "tests"
        ]
    
        for directory in base_dirs:
>           assert os.path.exists(directory), f"Directory {directory} should exist"
E           AssertionError: Directory tests should exist
E           assert False
E            +  where False = <function exists at 0x7ad754d9f600>('tests')
E            +    where <function exists at 0x7ad754d9f600> = <module 'posixpath' (frozen)>.exists
E            +      where <module 'posixpath' (frozen)> = <module 'os' (frozen)>.path

test/python/test_foundation.py:126: AssertionError
===================================================================================== short test summary info =====================================================================================
FAILED test/python/test_foundation.py::test_config_loading - ModuleNotFoundError: No module named 'config'
FAILED test/python/test_foundation.py::test_memory_manager_initialization - ModuleNotFoundError: No module named 'core'
FAILED test/python/test_foundation.py::test_model_registry_initialization - ModuleNotFoundError: No module named 'core'
FAILED test/python/test_foundation.py::test_tool_registry_initialization - ModuleNotFoundError: No module named 'core'
FAILED test/python/test_foundation.py::test_base_agent_safety_boundaries - ModuleNotFoundError: No module named 'agents'
FAILED test/python/test_foundation.py::test_agent_templates_exist - ModuleNotFoundError: No module named 'agents'
FAILED test/python/test_foundation.py::test_phase0_directory_structure - AssertionError: Directory tests should exist
7 failed, 46 passed in 0.29s
make: *** [Makefile:162: test] Error 1
justin@Intelluxe-demo:/home/intelluxe$ 