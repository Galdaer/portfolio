#!/bin/bash
# Pre-commit hook for Intelluxe AI Healthcare System
# Light validation and auto-formatting to catch obvious issues before commit

set -e

# Check for obvious problems that would fail CI
echo "üîç Pre-commit validation and formatting..."

# Check for merge conflict markers
if git diff --cached | grep -E '^[<>=]{7}'; then
    echo "‚ùå Merge conflict markers found in staged files!"
    exit 1
fi

# Check for debug statements in Python files
if git diff --cached --name-only | grep '\.py$' | xargs grep -l 'pdb\.set_trace\|breakpoint()' 2>/dev/null; then
    echo "‚ùå Debug statements found in Python files!"
    echo "üí° Remove pdb.set_trace() or breakpoint() calls"
    exit 1
fi

# Auto-format files by language
echo "üé® Auto-formatting staged files..."

# Python files: black + isort
python_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
if [ -n "$python_files" ]; then
    echo "   üêç Formatting Python files..."
    if command -v black >/dev/null 2>&1; then
        echo "$python_files" | xargs black --line-length=100
    elif python3 -m black --version >/dev/null 2>&1; then
        echo "$python_files" | xargs python3 -m black --line-length=100
    else
        echo "‚ö†Ô∏è  black not found - skipping Python formatting"
    fi

    if command -v isort >/dev/null 2>&1; then
        echo "$python_files" | xargs isort --profile black --line-length=100
    elif python3 -m isort --version >/dev/null 2>&1; then
        echo "$python_files" | xargs python3 -m isort --profile black --line-length=100
    else
        echo "‚ö†Ô∏è  isort not found - skipping import organization"
    fi

    # Re-add formatted Python files to staging
    echo "$python_files" | xargs git add
fi

# Shell/Bash files: shfmt
shell_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(sh|bash)$' || true)
if [ -n "$shell_files" ]; then
    echo "   üêö Formatting shell files..."
    if command -v shfmt >/dev/null 2>&1; then
        echo "$shell_files" | xargs shfmt -w -i 4 -ci
        echo "$shell_files" | xargs git add
    else
        echo "‚ö†Ô∏è  shfmt not found - skipping shell formatting (install with: go install mvdan.cc/sh/v3/cmd/shfmt@latest)"
    fi
fi

# YAML files: yamllint + prettier
yaml_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(yml|yaml)$' || true)
if [ -n "$yaml_files" ]; then
    echo "   üìÑ Formatting YAML files..."
    if command -v prettier >/dev/null 2>&1; then
        echo "$yaml_files" | xargs prettier --write --tab-width=2
        echo "$yaml_files" | xargs git add
    else
        echo "‚ö†Ô∏è  prettier not found - skipping YAML formatting (install with: npm install -g prettier)"
    fi
fi

# JSON files: prettier
json_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.json$' || true)
if [ -n "$json_files" ]; then
    echo "   üîß Formatting JSON files..."
    if command -v prettier >/dev/null 2>&1; then
        echo "$json_files" | xargs prettier --write --tab-width=2
        echo "$json_files" | xargs git add
    elif command -v jq >/dev/null 2>&1; then
        # Fallback to jq for JSON formatting
        for file in $json_files; do
            jq . "$file" > "$file.tmp" && mv "$file.tmp" "$file"
        done
        echo "$json_files" | xargs git add
    else
        echo "‚ö†Ô∏è  prettier or jq not found - skipping JSON formatting"
    fi
fi

# Markdown files: prettier
markdown_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(md|markdown)$' || true)
if [ -n "$markdown_files" ]; then
    echo "   üìù Formatting Markdown files..."
    if command -v prettier >/dev/null 2>&1; then
        echo "$markdown_files" | xargs prettier --write --prose-wrap=preserve --tab-width=2
        echo "$markdown_files" | xargs git add
    else
        echo "‚ö†Ô∏è  prettier not found - skipping Markdown formatting"
    fi
fi

# Check for TODO/FIXME in committed code (warn only)
if git diff --cached | grep -E '^\+.*\b(TODO|FIXME|XXX)\b'; then
    echo "‚ö†Ô∏è  Warning: TODO/FIXME comments found in staged changes"
    echo "üí° Consider addressing these before committing"
fi

# Final whitespace cleanup for all remaining files after formatting
echo "üßπ Final whitespace cleanup..."
all_staged_files=$(git diff --cached --name-only --diff-filter=ACM || true)
if [ -n "$all_staged_files" ]; then
    echo "$all_staged_files" | while read -r file; do
        if [ -f "$file" ] && file "$file" | grep -q "text"; then
            sed -i 's/[[:space:]]*$//' "$file" 2>/dev/null || true
        fi
    done
    # Re-add all files after final cleanup
    echo "$all_staged_files" | xargs git add 2>/dev/null || true
fi

echo "‚úÖ Pre-commit checks and formatting complete!"
